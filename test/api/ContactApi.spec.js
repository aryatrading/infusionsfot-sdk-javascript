/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InfusionsoftRestApi);
  }
}(this, function(expect, InfusionsoftRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InfusionsoftRestApi.ContactApi();
  });

  describe('(package)', function() {
    describe('ContactApi', function() {
      describe('applyTagsToContactIdUsingPOST', function() {
        it('should call applyTagsToContactIdUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for applyTagsToContactIdUsingPOST call and complete the assertions
          /*
          var contactId = 789;
          var tagIds = new InfusionsoftRestApi.TagId();
          tagIds.tagIds = ["0"];

          instance.applyTagsToContactIdUsingPOST(contactId, tagIds, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(InfusionsoftRestApi.EntryLongString);
              expect(data.key).to.be.a('string');
              expect(data.key).to.be("SUCCESS");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createContactUsingPOST', function() {
        it('should call createContactUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for createContactUsingPOST call and complete the assertions
          /*
          var opts = {};
          opts.contact = new InfusionsoftRestApi.FullContact();
          opts.contact.addresses = [new InfusionsoftRestApi.Address()];
          opts.contact.addresses[0].countryCode = "";
          opts.contact.addresses[0].field = "BILLING";
          opts.contact.addresses[0].line1 = "";
          opts.contact.addresses[0].line2 = "";
          opts.contact.addresses[0].locality = "";
          opts.contact.addresses[0].postalCode = "";
          opts.contact.addresses[0].region = "";
          opts.contact.birthday = new Date();
          opts.contact.company = new InfusionsoftRestApi.Company();
          opts.contact.company.companyName = "";
          opts.contact.company.id = "0";
          opts.contact.contactType = "";
          opts.contact.customFields = [new InfusionsoftRestApi.CustomFieldValue()];
          opts.contact.customFields[0].content = ;
          opts.contact.customFields[0].id = "0";
          opts.contact.dateCreated = new Date();
          opts.contact.emailAddresses = [new InfusionsoftRestApi.EmailAddress()];
          opts.contact.emailAddresses[0].email = "";
          opts.contact.emailAddresses[0].field = "EMAIL1";
          opts.contact.familyName = "";
          opts.contact.faxNumbers = [new InfusionsoftRestApi.FaxNumber()];
          opts.contact.faxNumbers[0].field = "FAX1";
          opts.contact.faxNumbers[0]._number = "";
          opts.contact.faxNumbers[0].type = "";
          opts.contact.givenName = "";
          opts.contact.jobTitle = "";
          opts.contact.lastUpdated = new Date();
          opts.contact.leadSourceId = "0";
          opts.contact.middleName = "";
          opts.contact.notes = "";
          opts.contact.optInReason = "";
          opts.contact.ownerId = "0";
          opts.contact.phoneNumbers = [new InfusionsoftRestApi.PhoneNumber()];
          opts.contact.phoneNumbers[0].extension = "";
          opts.contact.phoneNumbers[0].field = "PHONE1";
          opts.contact.phoneNumbers[0]._number = "";
          opts.contact.phoneNumbers[0].type = "";
          opts.contact.preferredLocale = "en_US";
          opts.contact.preferredName = "";
          opts.contact.prefix = "";
          opts.contact.relationships = [new InfusionsoftRestApi.Relationship()];
          opts.contact.relationships[0].id = "0";
          opts.contact.relationships[0].linkedContactId = "0";
          opts.contact.relationships[0].relationshipTypeId = "0";
          opts.contact.sourceType = "WEBFORM";
          opts.contact.suffix = "";
          opts.contact.tagIds = ["0"];
          opts.contact.timeZone = "";
          opts.contact.website = "";

          instance.createContactUsingPOST(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.FullContact);
            {
              let dataCtr = data.addresses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Address);
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("BILLING");
                expect(data.line1).to.be.a('string');
                expect(data.line1).to.be("");
                expect(data.line2).to.be.a('string');
                expect(data.line2).to.be("");
                expect(data.locality).to.be.a('string');
                expect(data.locality).to.be("");
                expect(data.postalCode).to.be.a('string');
                expect(data.postalCode).to.be("");
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
              }
            }
            expect(data.birthday).to.be.a(Date);
            expect(data.birthday).to.be(new Date());
            expect(data.company).to.be.a(InfusionsoftRestApi.Company);
                  expect(data.company.companyName).to.be.a('string');
              expect(data.company.companyName).to.be("");
              expect(data.company.id).to.be.a('number');
              expect(data.company.id).to.be("0");
            expect(data.contactType).to.be.a('string');
            expect(data.contactType).to.be("");
            {
              let dataCtr = data.customFields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.CustomFieldValue);
                expect(data.content).to.be.a(Object);
                expect(data.content).to.be();
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
              }
            }
            expect(data.dateCreated).to.be.a(Date);
            expect(data.dateCreated).to.be(new Date());
            {
              let dataCtr = data.emailAddresses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.EmailAddress);
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("");
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("EMAIL1");
              }
            }
            expect(data.familyName).to.be.a('string');
            expect(data.familyName).to.be("");
            {
              let dataCtr = data.faxNumbers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.FaxNumber);
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("FAX1");
                expect(data._number).to.be.a('string');
                expect(data._number).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
              }
            }
            expect(data.givenName).to.be.a('string');
            expect(data.givenName).to.be("");
            expect(data.jobTitle).to.be.a('string');
            expect(data.jobTitle).to.be("");
            expect(data.lastUpdated).to.be.a(Date);
            expect(data.lastUpdated).to.be(new Date());
            expect(data.leadSourceId).to.be.a('number');
            expect(data.leadSourceId).to.be("0");
            expect(data.middleName).to.be.a('string');
            expect(data.middleName).to.be("");
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            expect(data.optInReason).to.be.a('string');
            expect(data.optInReason).to.be("");
            expect(data.ownerId).to.be.a('number');
            expect(data.ownerId).to.be("0");
            {
              let dataCtr = data.phoneNumbers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.PhoneNumber);
                expect(data.extension).to.be.a('string');
                expect(data.extension).to.be("");
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("PHONE1");
                expect(data._number).to.be.a('string');
                expect(data._number).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
              }
            }
            expect(data.preferredLocale).to.be.a('string');
            expect(data.preferredLocale).to.be("en_US");
            expect(data.preferredName).to.be.a('string');
            expect(data.preferredName).to.be("");
            expect(data.prefix).to.be.a('string');
            expect(data.prefix).to.be("");
            {
              let dataCtr = data.relationships;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Relationship);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.linkedContactId).to.be.a('number');
                expect(data.linkedContactId).to.be("0");
                expect(data.relationshipTypeId).to.be.a('number');
                expect(data.relationshipTypeId).to.be("0");
              }
            }
            expect(data.sourceType).to.be.a('string');
            expect(data.sourceType).to.be("WEBFORM");
            expect(data.suffix).to.be.a('string');
            expect(data.suffix).to.be("");
            {
              let dataCtr = data.tagIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }
            expect(data.timeZone).to.be.a('string');
            expect(data.timeZone).to.be("");
            expect(data.website).to.be.a('string');
            expect(data.website).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrUpdateContactUsingPUT', function() {
        it('should call createOrUpdateContactUsingPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrUpdateContactUsingPUT call and complete the assertions
          /*
          var opts = {};
          opts.contact = new InfusionsoftRestApi.UpsertContact();
          opts.contact.addresses = [new InfusionsoftRestApi.Address()];
          opts.contact.addresses[0].countryCode = "";
          opts.contact.addresses[0].field = "BILLING";
          opts.contact.addresses[0].line1 = "";
          opts.contact.addresses[0].line2 = "";
          opts.contact.addresses[0].locality = "";
          opts.contact.addresses[0].postalCode = "";
          opts.contact.addresses[0].region = "";
          opts.contact.birthday = new Date();
          opts.contact.company = new InfusionsoftRestApi.Company();
          opts.contact.company.companyName = "";
          opts.contact.company.id = "0";
          opts.contact.contactType = "";
          opts.contact.customFields = [new InfusionsoftRestApi.CustomFieldValue()];
          opts.contact.customFields[0].content = ;
          opts.contact.customFields[0].id = "0";
          opts.contact.dateCreated = new Date();
          opts.contact.duplicateOption = "Email";
          opts.contact.emailAddresses = [new InfusionsoftRestApi.EmailAddress()];
          opts.contact.emailAddresses[0].email = "";
          opts.contact.emailAddresses[0].field = "EMAIL1";
          opts.contact.familyName = "";
          opts.contact.faxNumbers = [new InfusionsoftRestApi.FaxNumber()];
          opts.contact.faxNumbers[0].field = "FAX1";
          opts.contact.faxNumbers[0]._number = "";
          opts.contact.faxNumbers[0].type = "";
          opts.contact.givenName = "";
          opts.contact.jobTitle = "";
          opts.contact.lastUpdated = new Date();
          opts.contact.leadSourceId = "0";
          opts.contact.middleName = "";
          opts.contact.notes = "";
          opts.contact.optInReason = "";
          opts.contact.ownerId = "0";
          opts.contact.phoneNumbers = [new InfusionsoftRestApi.PhoneNumber()];
          opts.contact.phoneNumbers[0].extension = "";
          opts.contact.phoneNumbers[0].field = "PHONE1";
          opts.contact.phoneNumbers[0]._number = "";
          opts.contact.phoneNumbers[0].type = "";
          opts.contact.preferredLocale = "en_US";
          opts.contact.preferredName = "";
          opts.contact.prefix = "";
          opts.contact.relationships = [new InfusionsoftRestApi.Relationship()];
          opts.contact.relationships[0].id = "0";
          opts.contact.relationships[0].linkedContactId = "0";
          opts.contact.relationships[0].relationshipTypeId = "0";
          opts.contact.sourceType = "WEBFORM";
          opts.contact.suffix = "";
          opts.contact.tagIds = ["0"];
          opts.contact.timeZone = "";
          opts.contact.website = "";

          instance.createOrUpdateContactUsingPUT(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.FullContact);
            {
              let dataCtr = data.addresses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Address);
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("BILLING");
                expect(data.line1).to.be.a('string');
                expect(data.line1).to.be("");
                expect(data.line2).to.be.a('string');
                expect(data.line2).to.be("");
                expect(data.locality).to.be.a('string');
                expect(data.locality).to.be("");
                expect(data.postalCode).to.be.a('string');
                expect(data.postalCode).to.be("");
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
              }
            }
            expect(data.birthday).to.be.a(Date);
            expect(data.birthday).to.be(new Date());
            expect(data.company).to.be.a(InfusionsoftRestApi.Company);
                  expect(data.company.companyName).to.be.a('string');
              expect(data.company.companyName).to.be("");
              expect(data.company.id).to.be.a('number');
              expect(data.company.id).to.be("0");
            expect(data.contactType).to.be.a('string');
            expect(data.contactType).to.be("");
            {
              let dataCtr = data.customFields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.CustomFieldValue);
                expect(data.content).to.be.a(Object);
                expect(data.content).to.be();
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
              }
            }
            expect(data.dateCreated).to.be.a(Date);
            expect(data.dateCreated).to.be(new Date());
            {
              let dataCtr = data.emailAddresses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.EmailAddress);
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("");
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("EMAIL1");
              }
            }
            expect(data.familyName).to.be.a('string');
            expect(data.familyName).to.be("");
            {
              let dataCtr = data.faxNumbers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.FaxNumber);
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("FAX1");
                expect(data._number).to.be.a('string');
                expect(data._number).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
              }
            }
            expect(data.givenName).to.be.a('string');
            expect(data.givenName).to.be("");
            expect(data.jobTitle).to.be.a('string');
            expect(data.jobTitle).to.be("");
            expect(data.lastUpdated).to.be.a(Date);
            expect(data.lastUpdated).to.be(new Date());
            expect(data.leadSourceId).to.be.a('number');
            expect(data.leadSourceId).to.be("0");
            expect(data.middleName).to.be.a('string');
            expect(data.middleName).to.be("");
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            expect(data.optInReason).to.be.a('string');
            expect(data.optInReason).to.be("");
            expect(data.ownerId).to.be.a('number');
            expect(data.ownerId).to.be("0");
            {
              let dataCtr = data.phoneNumbers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.PhoneNumber);
                expect(data.extension).to.be.a('string');
                expect(data.extension).to.be("");
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("PHONE1");
                expect(data._number).to.be.a('string');
                expect(data._number).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
              }
            }
            expect(data.preferredLocale).to.be.a('string');
            expect(data.preferredLocale).to.be("en_US");
            expect(data.preferredName).to.be.a('string');
            expect(data.preferredName).to.be("");
            expect(data.prefix).to.be.a('string');
            expect(data.prefix).to.be("");
            {
              let dataCtr = data.relationships;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Relationship);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.linkedContactId).to.be.a('number');
                expect(data.linkedContactId).to.be("0");
                expect(data.relationshipTypeId).to.be.a('number');
                expect(data.relationshipTypeId).to.be("0");
              }
            }
            expect(data.sourceType).to.be.a('string');
            expect(data.sourceType).to.be("WEBFORM");
            expect(data.suffix).to.be.a('string');
            expect(data.suffix).to.be("");
            {
              let dataCtr = data.tagIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }
            expect(data.timeZone).to.be.a('string');
            expect(data.timeZone).to.be("");
            expect(data.website).to.be.a('string');
            expect(data.website).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteContactUsingDELETE', function() {
        it('should call deleteContactUsingDELETE successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteContactUsingDELETE call
          /*
          var contactId = 789;

          instance.deleteContactUsingDELETE(contactId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listAppliedTagsUsingGET', function() {
        it('should call listAppliedTagsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for listAppliedTagsUsingGET call and complete the assertions
          /*
          var contactId = 789;
          var opts = {};
          opts.limit = 56;
          opts.offset = 56;

          instance.listAppliedTagsUsingGET(contactId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.ContactTagList);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.ContactTag);
                expect(data.dateApplied).to.be.a(Date);
                expect(data.dateApplied).to.be(new Date());
                expect(data.tag).to.be.a(InfusionsoftRestApi.SimpleTag);
                      expect(data.tag.category).to.be.a('string');
                  expect(data.tag.category).to.be("");
                  expect(data.tag.id).to.be.a('number');
                  expect(data.tag.id).to.be("0");
                  expect(data.tag.name).to.be.a('string');
                  expect(data.tag.name).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listContactsUsingGET', function() {
        it('should call listContactsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for listContactsUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.limit = 56;
          opts.offset = 56;
          opts.email = "email_example";
          opts.givenName = "givenName_example";
          opts.familyName = "familyName_example";
          opts.order = "order_example";

          instance.listContactsUsingGET(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.ContactList);
            {
              let dataCtr = data.contacts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.FullContact);
                {
                  let dataCtr = data.addresses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.Address);
                    expect(data.countryCode).to.be.a('string');
                    expect(data.countryCode).to.be("");
                    expect(data.field).to.be.a('string');
                    expect(data.field).to.be("BILLING");
                    expect(data.line1).to.be.a('string');
                    expect(data.line1).to.be("");
                    expect(data.line2).to.be.a('string');
                    expect(data.line2).to.be("");
                    expect(data.locality).to.be.a('string');
                    expect(data.locality).to.be("");
                    expect(data.postalCode).to.be.a('string');
                    expect(data.postalCode).to.be("");
                    expect(data.region).to.be.a('string');
                    expect(data.region).to.be("");
                  }
                }
                expect(data.birthday).to.be.a(Date);
                expect(data.birthday).to.be(new Date());
                expect(data.company).to.be.a(InfusionsoftRestApi.Company);
                      expect(data.company.companyName).to.be.a('string');
                  expect(data.company.companyName).to.be("");
                  expect(data.company.id).to.be.a('number');
                  expect(data.company.id).to.be("0");
                expect(data.contactType).to.be.a('string');
                expect(data.contactType).to.be("");
                {
                  let dataCtr = data.customFields;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.CustomFieldValue);
                    expect(data.content).to.be.a(Object);
                    expect(data.content).to.be();
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                  }
                }
                expect(data.dateCreated).to.be.a(Date);
                expect(data.dateCreated).to.be(new Date());
                {
                  let dataCtr = data.emailAddresses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.EmailAddress);
                    expect(data.email).to.be.a('string');
                    expect(data.email).to.be("");
                    expect(data.field).to.be.a('string');
                    expect(data.field).to.be("EMAIL1");
                  }
                }
                expect(data.familyName).to.be.a('string');
                expect(data.familyName).to.be("");
                {
                  let dataCtr = data.faxNumbers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.FaxNumber);
                    expect(data.field).to.be.a('string');
                    expect(data.field).to.be("FAX1");
                    expect(data._number).to.be.a('string');
                    expect(data._number).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                  }
                }
                expect(data.givenName).to.be.a('string');
                expect(data.givenName).to.be("");
                expect(data.jobTitle).to.be.a('string');
                expect(data.jobTitle).to.be("");
                expect(data.lastUpdated).to.be.a(Date);
                expect(data.lastUpdated).to.be(new Date());
                expect(data.leadSourceId).to.be.a('number');
                expect(data.leadSourceId).to.be("0");
                expect(data.middleName).to.be.a('string');
                expect(data.middleName).to.be("");
                expect(data.notes).to.be.a('string');
                expect(data.notes).to.be("");
                expect(data.optInReason).to.be.a('string');
                expect(data.optInReason).to.be("");
                expect(data.ownerId).to.be.a('number');
                expect(data.ownerId).to.be("0");
                {
                  let dataCtr = data.phoneNumbers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.PhoneNumber);
                    expect(data.extension).to.be.a('string');
                    expect(data.extension).to.be("");
                    expect(data.field).to.be.a('string');
                    expect(data.field).to.be("PHONE1");
                    expect(data._number).to.be.a('string');
                    expect(data._number).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                  }
                }
                expect(data.preferredLocale).to.be.a('string');
                expect(data.preferredLocale).to.be("en_US");
                expect(data.preferredName).to.be.a('string');
                expect(data.preferredName).to.be("");
                expect(data.prefix).to.be.a('string');
                expect(data.prefix).to.be("");
                {
                  let dataCtr = data.relationships;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.Relationship);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.linkedContactId).to.be.a('number');
                    expect(data.linkedContactId).to.be("0");
                    expect(data.relationshipTypeId).to.be.a('number');
                    expect(data.relationshipTypeId).to.be("0");
                  }
                }
                expect(data.sourceType).to.be.a('string');
                expect(data.sourceType).to.be("WEBFORM");
                expect(data.suffix).to.be.a('string');
                expect(data.suffix).to.be("");
                {
                  let dataCtr = data.tagIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be("0");
                  }
                }
                expect(data.timeZone).to.be.a('string');
                expect(data.timeZone).to.be("");
                expect(data.website).to.be.a('string');
                expect(data.website).to.be("");
              }
            }
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listCustomFieldsUsingGET', function() {
        it('should call listCustomFieldsUsingGET successfully', function(done) {
          // TODO: uncomment listCustomFieldsUsingGET call and complete the assertions
          /*

          instance.listCustomFieldsUsingGET(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(InfusionsoftRestApi.CustomFieldMetaData);
              expect(data.fieldType).to.be.a('string');
              expect(data.fieldType).to.be("Currency");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.label).to.be.a('string');
              expect(data.label).to.be("");
              {
                let dataCtr = data.options;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(InfusionsoftRestApi.CustomFieldOption);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("");
                  expect(data.label).to.be.a('string');
                  expect(data.label).to.be("");
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(InfusionsoftRestApi.CustomFieldOptionItem);
                      expect(data.id).to.be.a('string');
                      expect(data.id).to.be("");
                      expect(data.label).to.be.a('string');
                      expect(data.label).to.be("");
                    }
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loadUsingGET', function() {
        it('should call loadUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for loadUsingGET call and complete the assertions
          /*
          var contactId = 789;
          var opts = {};
          opts.optionalProperties = ["optionalProperties_example"];

          instance.loadUsingGET(contactId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.FullContact);
            {
              let dataCtr = data.addresses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Address);
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("BILLING");
                expect(data.line1).to.be.a('string');
                expect(data.line1).to.be("");
                expect(data.line2).to.be.a('string');
                expect(data.line2).to.be("");
                expect(data.locality).to.be.a('string');
                expect(data.locality).to.be("");
                expect(data.postalCode).to.be.a('string');
                expect(data.postalCode).to.be("");
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
              }
            }
            expect(data.birthday).to.be.a(Date);
            expect(data.birthday).to.be(new Date());
            expect(data.company).to.be.a(InfusionsoftRestApi.Company);
                  expect(data.company.companyName).to.be.a('string');
              expect(data.company.companyName).to.be("");
              expect(data.company.id).to.be.a('number');
              expect(data.company.id).to.be("0");
            expect(data.contactType).to.be.a('string');
            expect(data.contactType).to.be("");
            {
              let dataCtr = data.customFields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.CustomFieldValue);
                expect(data.content).to.be.a(Object);
                expect(data.content).to.be();
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
              }
            }
            expect(data.dateCreated).to.be.a(Date);
            expect(data.dateCreated).to.be(new Date());
            {
              let dataCtr = data.emailAddresses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.EmailAddress);
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("");
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("EMAIL1");
              }
            }
            expect(data.familyName).to.be.a('string');
            expect(data.familyName).to.be("");
            {
              let dataCtr = data.faxNumbers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.FaxNumber);
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("FAX1");
                expect(data._number).to.be.a('string');
                expect(data._number).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
              }
            }
            expect(data.givenName).to.be.a('string');
            expect(data.givenName).to.be("");
            expect(data.jobTitle).to.be.a('string');
            expect(data.jobTitle).to.be("");
            expect(data.lastUpdated).to.be.a(Date);
            expect(data.lastUpdated).to.be(new Date());
            expect(data.leadSourceId).to.be.a('number');
            expect(data.leadSourceId).to.be("0");
            expect(data.middleName).to.be.a('string');
            expect(data.middleName).to.be("");
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            expect(data.optInReason).to.be.a('string');
            expect(data.optInReason).to.be("");
            expect(data.ownerId).to.be.a('number');
            expect(data.ownerId).to.be("0");
            {
              let dataCtr = data.phoneNumbers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.PhoneNumber);
                expect(data.extension).to.be.a('string');
                expect(data.extension).to.be("");
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("PHONE1");
                expect(data._number).to.be.a('string');
                expect(data._number).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
              }
            }
            expect(data.preferredLocale).to.be.a('string');
            expect(data.preferredLocale).to.be("en_US");
            expect(data.preferredName).to.be.a('string');
            expect(data.preferredName).to.be("");
            expect(data.prefix).to.be.a('string');
            expect(data.prefix).to.be("");
            {
              let dataCtr = data.relationships;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Relationship);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.linkedContactId).to.be.a('number');
                expect(data.linkedContactId).to.be("0");
                expect(data.relationshipTypeId).to.be.a('number');
                expect(data.relationshipTypeId).to.be("0");
              }
            }
            expect(data.sourceType).to.be.a('string');
            expect(data.sourceType).to.be("WEBFORM");
            expect(data.suffix).to.be.a('string');
            expect(data.suffix).to.be("");
            {
              let dataCtr = data.tagIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }
            expect(data.timeZone).to.be.a('string');
            expect(data.timeZone).to.be("");
            expect(data.website).to.be.a('string');
            expect(data.website).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeTagsFromContactUsingDELETE', function() {
        it('should call removeTagsFromContactUsingDELETE successfully', function(done) {
          // TODO: uncomment, update parameter values for removeTagsFromContactUsingDELETE call
          /*
          var contactId = 789;
          var tagId = 789;

          instance.removeTagsFromContactUsingDELETE(contactId, tagId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeTagsFromContactUsingDELETE1', function() {
        it('should call removeTagsFromContactUsingDELETE1 successfully', function(done) {
          // TODO: uncomment, update parameter values for removeTagsFromContactUsingDELETE1 call
          /*
          var contactId = 789;
          var ids = "ids_example";

          instance.removeTagsFromContactUsingDELETE1(contactId, ids, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateContactUsingPATCH', function() {
        it('should call updateContactUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for updateContactUsingPATCH call and complete the assertions
          /*
          var contactId = 789;
          var opts = {};
          opts.contact = new InfusionsoftRestApi.FullContact();
          opts.contact.addresses = [new InfusionsoftRestApi.Address()];
          opts.contact.addresses[0].countryCode = "";
          opts.contact.addresses[0].field = "BILLING";
          opts.contact.addresses[0].line1 = "";
          opts.contact.addresses[0].line2 = "";
          opts.contact.addresses[0].locality = "";
          opts.contact.addresses[0].postalCode = "";
          opts.contact.addresses[0].region = "";
          opts.contact.birthday = new Date();
          opts.contact.company = new InfusionsoftRestApi.Company();
          opts.contact.company.companyName = "";
          opts.contact.company.id = "0";
          opts.contact.contactType = "";
          opts.contact.customFields = [new InfusionsoftRestApi.CustomFieldValue()];
          opts.contact.customFields[0].content = ;
          opts.contact.customFields[0].id = "0";
          opts.contact.dateCreated = new Date();
          opts.contact.emailAddresses = [new InfusionsoftRestApi.EmailAddress()];
          opts.contact.emailAddresses[0].email = "";
          opts.contact.emailAddresses[0].field = "EMAIL1";
          opts.contact.familyName = "";
          opts.contact.faxNumbers = [new InfusionsoftRestApi.FaxNumber()];
          opts.contact.faxNumbers[0].field = "FAX1";
          opts.contact.faxNumbers[0]._number = "";
          opts.contact.faxNumbers[0].type = "";
          opts.contact.givenName = "";
          opts.contact.jobTitle = "";
          opts.contact.lastUpdated = new Date();
          opts.contact.leadSourceId = "0";
          opts.contact.middleName = "";
          opts.contact.notes = "";
          opts.contact.optInReason = "";
          opts.contact.ownerId = "0";
          opts.contact.phoneNumbers = [new InfusionsoftRestApi.PhoneNumber()];
          opts.contact.phoneNumbers[0].extension = "";
          opts.contact.phoneNumbers[0].field = "PHONE1";
          opts.contact.phoneNumbers[0]._number = "";
          opts.contact.phoneNumbers[0].type = "";
          opts.contact.preferredLocale = "en_US";
          opts.contact.preferredName = "";
          opts.contact.prefix = "";
          opts.contact.relationships = [new InfusionsoftRestApi.Relationship()];
          opts.contact.relationships[0].id = "0";
          opts.contact.relationships[0].linkedContactId = "0";
          opts.contact.relationships[0].relationshipTypeId = "0";
          opts.contact.sourceType = "WEBFORM";
          opts.contact.suffix = "";
          opts.contact.tagIds = ["0"];
          opts.contact.timeZone = "";
          opts.contact.website = "";

          instance.updateContactUsingPATCH(contactId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.FullContact);
            {
              let dataCtr = data.addresses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Address);
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("BILLING");
                expect(data.line1).to.be.a('string');
                expect(data.line1).to.be("");
                expect(data.line2).to.be.a('string');
                expect(data.line2).to.be("");
                expect(data.locality).to.be.a('string');
                expect(data.locality).to.be("");
                expect(data.postalCode).to.be.a('string');
                expect(data.postalCode).to.be("");
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
              }
            }
            expect(data.birthday).to.be.a(Date);
            expect(data.birthday).to.be(new Date());
            expect(data.company).to.be.a(InfusionsoftRestApi.Company);
                  expect(data.company.companyName).to.be.a('string');
              expect(data.company.companyName).to.be("");
              expect(data.company.id).to.be.a('number');
              expect(data.company.id).to.be("0");
            expect(data.contactType).to.be.a('string');
            expect(data.contactType).to.be("");
            {
              let dataCtr = data.customFields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.CustomFieldValue);
                expect(data.content).to.be.a(Object);
                expect(data.content).to.be();
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
              }
            }
            expect(data.dateCreated).to.be.a(Date);
            expect(data.dateCreated).to.be(new Date());
            {
              let dataCtr = data.emailAddresses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.EmailAddress);
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("");
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("EMAIL1");
              }
            }
            expect(data.familyName).to.be.a('string');
            expect(data.familyName).to.be("");
            {
              let dataCtr = data.faxNumbers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.FaxNumber);
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("FAX1");
                expect(data._number).to.be.a('string');
                expect(data._number).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
              }
            }
            expect(data.givenName).to.be.a('string');
            expect(data.givenName).to.be("");
            expect(data.jobTitle).to.be.a('string');
            expect(data.jobTitle).to.be("");
            expect(data.lastUpdated).to.be.a(Date);
            expect(data.lastUpdated).to.be(new Date());
            expect(data.leadSourceId).to.be.a('number');
            expect(data.leadSourceId).to.be("0");
            expect(data.middleName).to.be.a('string');
            expect(data.middleName).to.be("");
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            expect(data.optInReason).to.be.a('string');
            expect(data.optInReason).to.be("");
            expect(data.ownerId).to.be.a('number');
            expect(data.ownerId).to.be("0");
            {
              let dataCtr = data.phoneNumbers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.PhoneNumber);
                expect(data.extension).to.be.a('string');
                expect(data.extension).to.be("");
                expect(data.field).to.be.a('string');
                expect(data.field).to.be("PHONE1");
                expect(data._number).to.be.a('string');
                expect(data._number).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
              }
            }
            expect(data.preferredLocale).to.be.a('string');
            expect(data.preferredLocale).to.be("en_US");
            expect(data.preferredName).to.be.a('string');
            expect(data.preferredName).to.be("");
            expect(data.prefix).to.be.a('string');
            expect(data.prefix).to.be("");
            {
              let dataCtr = data.relationships;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Relationship);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.linkedContactId).to.be.a('number');
                expect(data.linkedContactId).to.be("0");
                expect(data.relationshipTypeId).to.be.a('number');
                expect(data.relationshipTypeId).to.be("0");
              }
            }
            expect(data.sourceType).to.be.a('string');
            expect(data.sourceType).to.be("WEBFORM");
            expect(data.suffix).to.be.a('string');
            expect(data.suffix).to.be("");
            {
              let dataCtr = data.tagIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }
            expect(data.timeZone).to.be.a('string');
            expect(data.timeZone).to.be("");
            expect(data.website).to.be.a('string');
            expect(data.website).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
