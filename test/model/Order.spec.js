/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InfusionsoftRestApi);
  }
}(this, function(expect, InfusionsoftRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Order', function() {
      beforeEach(function() {
        instance = new InfusionsoftRestApi.Order();
      });

      it('should create an instance of Order', function() {
        // TODO: update the code to test Order
        expect(instance).to.be.a(InfusionsoftRestApi.Order);
      });

      it('should have the property contact (base name: "contact")', function() {
        // TODO: update the code to test the property contact
        expect(instance).to.have.property('contact');
        // expect(instance.contact).to.be(expectedValueLiteral);
      });

      it('should have the property creationDate (base name: "creation_date")', function() {
        // TODO: update the code to test the property creationDate
        expect(instance).to.have.property('creationDate');
        // expect(instance.creationDate).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property leadAffiliateId (base name: "lead_affiliate_id")', function() {
        // TODO: update the code to test the property leadAffiliateId
        expect(instance).to.have.property('leadAffiliateId');
        // expect(instance.leadAffiliateId).to.be(expectedValueLiteral);
      });

      it('should have the property modificationDate (base name: "modification_date")', function() {
        // TODO: update the code to test the property modificationDate
        expect(instance).to.have.property('modificationDate');
        // expect(instance.modificationDate).to.be(expectedValueLiteral);
      });

      it('should have the property orderDate (base name: "order_date")', function() {
        // TODO: update the code to test the property orderDate
        expect(instance).to.have.property('orderDate');
        // expect(instance.orderDate).to.be(expectedValueLiteral);
      });

      it('should have the property orderItems (base name: "order_items")', function() {
        // TODO: update the code to test the property orderItems
        expect(instance).to.have.property('orderItems');
        // expect(instance.orderItems).to.be(expectedValueLiteral);
      });

      it('should have the property recurring (base name: "recurring")', function() {
        // TODO: update the code to test the property recurring
        expect(instance).to.have.property('recurring');
        // expect(instance.recurring).to.be(expectedValueLiteral);
      });

      it('should have the property refundTotal (base name: "refund_total")', function() {
        // TODO: update the code to test the property refundTotal
        expect(instance).to.have.property('refundTotal');
        // expect(instance.refundTotal).to.be(expectedValueLiteral);
      });

      it('should have the property salesAffiliateId (base name: "sales_affiliate_id")', function() {
        // TODO: update the code to test the property salesAffiliateId
        expect(instance).to.have.property('salesAffiliateId');
        // expect(instance.salesAffiliateId).to.be(expectedValueLiteral);
      });

      it('should have the property shippingInformation (base name: "shipping_information")', function() {
        // TODO: update the code to test the property shippingInformation
        expect(instance).to.have.property('shippingInformation');
        // expect(instance.shippingInformation).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property total (base name: "total")', function() {
        // TODO: update the code to test the property total
        expect(instance).to.have.property('total');
        // expect(instance.total).to.be(expectedValueLiteral);
      });

      it('should have the property totalDue (base name: "total_due")', function() {
        // TODO: update the code to test the property totalDue
        expect(instance).to.have.property('totalDue');
        // expect(instance.totalDue).to.be(expectedValueLiteral);
      });

      it('should have the property totalPaid (base name: "total_paid")', function() {
        // TODO: update the code to test the property totalPaid
        expect(instance).to.have.property('totalPaid');
        // expect(instance.totalPaid).to.be(expectedValueLiteral);
      });

    });
  });

}));
