/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InfusionsoftRestApi);
  }
}(this, function(expect, InfusionsoftRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InfusionsoftRestApi.RESTHooksApi();
  });

  describe('(package)', function() {
    describe('RESTHooksApi', function() {
      describe('createAHookSubscription', function() {
        it('should call createAHookSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for createAHookSubscription call and complete the assertions
          /*
          var restHookRequest = new InfusionsoftRestApi.RestHookRequest();
          restHookRequest.eventKey = "";
          restHookRequest.hookUrl = "";

          instance.createAHookSubscription(restHookRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.RestHook);
            expect(data.eventKey).to.be.a('string');
            expect(data.eventKey).to.be("");
            expect(data.hookUrl).to.be.a('string');
            expect(data.hookUrl).to.be("");
            expect(data.key).to.be.a('string');
            expect(data.key).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Unverified");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAHookSubscription', function() {
        it('should call deleteAHookSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAHookSubscription call
          /*
          var key = "key_example";

          instance.deleteAHookSubscription(key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listHookEventTypes', function() {
        it('should call listHookEventTypes successfully', function(done) {
          // TODO: uncomment listHookEventTypes call and complete the assertions
          /*

          instance.listHookEventTypes(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('string');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listStoredHookSubscriptions', function() {
        it('should call listStoredHookSubscriptions successfully', function(done) {
          // TODO: uncomment listStoredHookSubscriptions call and complete the assertions
          /*

          instance.listStoredHookSubscriptions(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(InfusionsoftRestApi.RestHook);
              expect(data.eventKey).to.be.a('string');
              expect(data.eventKey).to.be("");
              expect(data.hookUrl).to.be.a('string');
              expect(data.hookUrl).to.be("");
              expect(data.key).to.be.a('string');
              expect(data.key).to.be("");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("Unverified");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('retrieveAHookSubscription', function() {
        it('should call retrieveAHookSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for retrieveAHookSubscription call and complete the assertions
          /*
          var key = "key_example";

          instance.retrieveAHookSubscription(key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.RestHook);
            expect(data.eventKey).to.be.a('string');
            expect(data.eventKey).to.be("");
            expect(data.hookUrl).to.be.a('string');
            expect(data.hookUrl).to.be("");
            expect(data.key).to.be.a('string');
            expect(data.key).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Unverified");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateAHookSubscription', function() {
        it('should call updateAHookSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for updateAHookSubscription call and complete the assertions
          /*
          var key = "key_example";
          var restHookRequest = new InfusionsoftRestApi.RestHookRequest();
          restHookRequest.eventKey = "";
          restHookRequest.hookUrl = "";

          instance.updateAHookSubscription(key, restHookRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.RestHook);
            expect(data.eventKey).to.be.a('string');
            expect(data.eventKey).to.be("");
            expect(data.hookUrl).to.be.a('string');
            expect(data.hookUrl).to.be("");
            expect(data.key).to.be.a('string');
            expect(data.key).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Unverified");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('verifyAHookSubscription', function() {
        it('should call verifyAHookSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for verifyAHookSubscription call and complete the assertions
          /*
          var key = "key_example";

          instance.verifyAHookSubscription(key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.RestHook);
            expect(data.eventKey).to.be.a('string');
            expect(data.eventKey).to.be("");
            expect(data.hookUrl).to.be.a('string');
            expect(data.hookUrl).to.be("");
            expect(data.key).to.be.a('string');
            expect(data.key).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Unverified");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
