/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InfusionsoftRestApi);
  }
}(this, function(expect, InfusionsoftRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InfusionsoftRestApi.ProductApi();
  });

  describe('(package)', function() {
    describe('ProductApi', function() {
      describe('loadProductUsingGET', function() {
        it('should call loadProductUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for loadProductUsingGET call and complete the assertions
          /*
          var productId = 789;

          instance.loadProductUsingGET(productId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.Product);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.productDesc).to.be.a('string');
            expect(data.productDesc).to.be("");
            expect(data.productName).to.be.a('string');
            expect(data.productName).to.be("");
            {
              let dataCtr = data.productOptions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.ProductOption);
                expect(data.allowSpaces).to.be.a('boolean');
                expect(data.allowSpaces).to.be(false);
                expect(data.canContainCharacter).to.be.a('boolean');
                expect(data.canContainCharacter).to.be(false);
                expect(data.canContainNumber).to.be.a('boolean');
                expect(data.canContainNumber).to.be(false);
                expect(data.canEndWithCharacter).to.be.a('boolean');
                expect(data.canEndWithCharacter).to.be(false);
                expect(data.canEndWithNumber).to.be.a('boolean');
                expect(data.canEndWithNumber).to.be(false);
                expect(data.canStartWithCharacter).to.be.a('boolean');
                expect(data.canStartWithCharacter).to.be(false);
                expect(data.canStartWithNumber).to.be.a('boolean');
                expect(data.canStartWithNumber).to.be(false);
                expect(data.displayIndex).to.be.a('number');
                expect(data.displayIndex).to.be(0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.label).to.be.a('string');
                expect(data.label).to.be("");
                expect(data.maxChars).to.be.a('number');
                expect(data.maxChars).to.be(0);
                expect(data.minChars).to.be.a('number');
                expect(data.minChars).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.required).to.be.a('boolean');
                expect(data.required).to.be(false);
                expect(data.textMessage).to.be.a('string');
                expect(data.textMessage).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("FixedList");
                {
                  let dataCtr = data.values;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.ProductOptionValue);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.index).to.be.a('number');
                    expect(data.index).to.be("0");
                    expect(data.isDefault).to.be.a('boolean');
                    expect(data.isDefault).to.be(false);
                    expect(data.label).to.be.a('string');
                    expect(data.label).to.be("");
                    expect(data.priceAdjustment).to.be.a('number');
                    expect(data.priceAdjustment).to.be(0.0);
                    expect(data.sku).to.be.a('string');
                    expect(data.sku).to.be("");
                  }
                }
              }
            }
            expect(data.productPrice).to.be.a('number');
            expect(data.productPrice).to.be(0.0);
            expect(data.productShortDesc).to.be.a('string');
            expect(data.productShortDesc).to.be("");
            expect(data.sku).to.be.a('string');
            expect(data.sku).to.be("");
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.subCategoryId).to.be.a('number');
            expect(data.subCategoryId).to.be("0");
            expect(data.subscriptionOnly).to.be.a('boolean');
            expect(data.subscriptionOnly).to.be(false);
            {
              let dataCtr = data.subscriptionPlans;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.SubscriptionPlan);
                expect(data.active).to.be.a('boolean');
                expect(data.active).to.be(false);
                expect(data.cycle).to.be.a('number');
                expect(data.cycle).to.be(0);
                expect(data.frequency).to.be.a('number');
                expect(data.frequency).to.be(0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.numberOfCycles).to.be.a('number');
                expect(data.numberOfCycles).to.be(0);
                expect(data.planPrice).to.be.a('number');
                expect(data.planPrice).to.be(0.0);
                expect(data.subscriptionPlanIndex).to.be.a('number');
                expect(data.subscriptionPlanIndex).to.be(0);
                expect(data.subscriptionPlanName).to.be.a('string');
                expect(data.subscriptionPlanName).to.be("");
              }
            }
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchUsingGET3', function() {
        it('should call searchUsingGET3 successfully', function(done) {
          // TODO: uncomment, update parameter values for searchUsingGET3 call and complete the assertions
          /*
          var opts = {};
          opts.limit = 56;
          opts.offset = 56;
          opts.active = true;

          instance.searchUsingGET3(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.ProductList);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.products;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Product);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.productDesc).to.be.a('string');
                expect(data.productDesc).to.be("");
                expect(data.productName).to.be.a('string');
                expect(data.productName).to.be("");
                {
                  let dataCtr = data.productOptions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.ProductOption);
                    expect(data.allowSpaces).to.be.a('boolean');
                    expect(data.allowSpaces).to.be(false);
                    expect(data.canContainCharacter).to.be.a('boolean');
                    expect(data.canContainCharacter).to.be(false);
                    expect(data.canContainNumber).to.be.a('boolean');
                    expect(data.canContainNumber).to.be(false);
                    expect(data.canEndWithCharacter).to.be.a('boolean');
                    expect(data.canEndWithCharacter).to.be(false);
                    expect(data.canEndWithNumber).to.be.a('boolean');
                    expect(data.canEndWithNumber).to.be(false);
                    expect(data.canStartWithCharacter).to.be.a('boolean');
                    expect(data.canStartWithCharacter).to.be(false);
                    expect(data.canStartWithNumber).to.be.a('boolean');
                    expect(data.canStartWithNumber).to.be(false);
                    expect(data.displayIndex).to.be.a('number');
                    expect(data.displayIndex).to.be(0);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.label).to.be.a('string');
                    expect(data.label).to.be("");
                    expect(data.maxChars).to.be.a('number');
                    expect(data.maxChars).to.be(0);
                    expect(data.minChars).to.be.a('number');
                    expect(data.minChars).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.required).to.be.a('boolean');
                    expect(data.required).to.be(false);
                    expect(data.textMessage).to.be.a('string');
                    expect(data.textMessage).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("FixedList");
                    {
                      let dataCtr = data.values;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(InfusionsoftRestApi.ProductOptionValue);
                        expect(data.id).to.be.a('number');
                        expect(data.id).to.be("0");
                        expect(data.index).to.be.a('number');
                        expect(data.index).to.be("0");
                        expect(data.isDefault).to.be.a('boolean');
                        expect(data.isDefault).to.be(false);
                        expect(data.label).to.be.a('string');
                        expect(data.label).to.be("");
                        expect(data.priceAdjustment).to.be.a('number');
                        expect(data.priceAdjustment).to.be(0.0);
                        expect(data.sku).to.be.a('string');
                        expect(data.sku).to.be("");
                      }
                    }
                  }
                }
                expect(data.productPrice).to.be.a('number');
                expect(data.productPrice).to.be(0.0);
                expect(data.productShortDesc).to.be.a('string');
                expect(data.productShortDesc).to.be("");
                expect(data.sku).to.be.a('string');
                expect(data.sku).to.be("");
                expect(data.status).to.be.a('number');
                expect(data.status).to.be(0);
                expect(data.subCategoryId).to.be.a('number');
                expect(data.subCategoryId).to.be("0");
                expect(data.subscriptionOnly).to.be.a('boolean');
                expect(data.subscriptionOnly).to.be(false);
                {
                  let dataCtr = data.subscriptionPlans;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.SubscriptionPlan);
                    expect(data.active).to.be.a('boolean');
                    expect(data.active).to.be(false);
                    expect(data.cycle).to.be.a('number');
                    expect(data.cycle).to.be(0);
                    expect(data.frequency).to.be.a('number');
                    expect(data.frequency).to.be(0);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.numberOfCycles).to.be.a('number');
                    expect(data.numberOfCycles).to.be(0);
                    expect(data.planPrice).to.be.a('number');
                    expect(data.planPrice).to.be(0.0);
                    expect(data.subscriptionPlanIndex).to.be.a('number');
                    expect(data.subscriptionPlanIndex).to.be(0);
                    expect(data.subscriptionPlanName).to.be.a('string');
                    expect(data.subscriptionPlanName).to.be("");
                  }
                }
                expect(data.url).to.be.a('string');
                expect(data.url).to.be("");
              }
            }
            expect(data.syncToken).to.be.a('string');
            expect(data.syncToken).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('syncUsingGET1', function() {
        it('should call syncUsingGET1 successfully', function(done) {
          // TODO: uncomment, update parameter values for syncUsingGET1 call and complete the assertions
          /*
          var opts = {};
          opts.syncToken = "syncToken_example";
          opts.limit = 56;
          opts.offset = 56;

          instance.syncUsingGET1(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.ProductStatusList);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.productStatuses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.ProductStatus);
                expect(data.product).to.be.a(InfusionsoftRestApi.Product);
                      expect(data.product.id).to.be.a('number');
                  expect(data.product.id).to.be("0");
                  expect(data.product.productDesc).to.be.a('string');
                  expect(data.product.productDesc).to.be("");
                  expect(data.product.productName).to.be.a('string');
                  expect(data.product.productName).to.be("");
                  {
                    let dataCtr = data.product.productOptions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(InfusionsoftRestApi.ProductOption);
                      expect(data.allowSpaces).to.be.a('boolean');
                      expect(data.allowSpaces).to.be(false);
                      expect(data.canContainCharacter).to.be.a('boolean');
                      expect(data.canContainCharacter).to.be(false);
                      expect(data.canContainNumber).to.be.a('boolean');
                      expect(data.canContainNumber).to.be(false);
                      expect(data.canEndWithCharacter).to.be.a('boolean');
                      expect(data.canEndWithCharacter).to.be(false);
                      expect(data.canEndWithNumber).to.be.a('boolean');
                      expect(data.canEndWithNumber).to.be(false);
                      expect(data.canStartWithCharacter).to.be.a('boolean');
                      expect(data.canStartWithCharacter).to.be(false);
                      expect(data.canStartWithNumber).to.be.a('boolean');
                      expect(data.canStartWithNumber).to.be(false);
                      expect(data.displayIndex).to.be.a('number');
                      expect(data.displayIndex).to.be(0);
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be("0");
                      expect(data.label).to.be.a('string');
                      expect(data.label).to.be("");
                      expect(data.maxChars).to.be.a('number');
                      expect(data.maxChars).to.be(0);
                      expect(data.minChars).to.be.a('number');
                      expect(data.minChars).to.be(0);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.required).to.be.a('boolean');
                      expect(data.required).to.be(false);
                      expect(data.textMessage).to.be.a('string');
                      expect(data.textMessage).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("FixedList");
                      {
                        let dataCtr = data.values;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(InfusionsoftRestApi.ProductOptionValue);
                          expect(data.id).to.be.a('number');
                          expect(data.id).to.be("0");
                          expect(data.index).to.be.a('number');
                          expect(data.index).to.be("0");
                          expect(data.isDefault).to.be.a('boolean');
                          expect(data.isDefault).to.be(false);
                          expect(data.label).to.be.a('string');
                          expect(data.label).to.be("");
                          expect(data.priceAdjustment).to.be.a('number');
                          expect(data.priceAdjustment).to.be(0.0);
                          expect(data.sku).to.be.a('string');
                          expect(data.sku).to.be("");
                        }
                      }
                    }
                  }
                  expect(data.product.productPrice).to.be.a('number');
                  expect(data.product.productPrice).to.be(0.0);
                  expect(data.product.productShortDesc).to.be.a('string');
                  expect(data.product.productShortDesc).to.be("");
                  expect(data.product.sku).to.be.a('string');
                  expect(data.product.sku).to.be("");
                  expect(data.product.status).to.be.a('number');
                  expect(data.product.status).to.be(0);
                  expect(data.product.subCategoryId).to.be.a('number');
                  expect(data.product.subCategoryId).to.be("0");
                  expect(data.product.subscriptionOnly).to.be.a('boolean');
                  expect(data.product.subscriptionOnly).to.be(false);
                  {
                    let dataCtr = data.product.subscriptionPlans;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(InfusionsoftRestApi.SubscriptionPlan);
                      expect(data.active).to.be.a('boolean');
                      expect(data.active).to.be(false);
                      expect(data.cycle).to.be.a('number');
                      expect(data.cycle).to.be(0);
                      expect(data.frequency).to.be.a('number');
                      expect(data.frequency).to.be(0);
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be("0");
                      expect(data.numberOfCycles).to.be.a('number');
                      expect(data.numberOfCycles).to.be(0);
                      expect(data.planPrice).to.be.a('number');
                      expect(data.planPrice).to.be(0.0);
                      expect(data.subscriptionPlanIndex).to.be.a('number');
                      expect(data.subscriptionPlanIndex).to.be(0);
                      expect(data.subscriptionPlanName).to.be.a('string');
                      expect(data.subscriptionPlanName).to.be("");
                    }
                  }
                  expect(data.product.url).to.be.a('string');
                  expect(data.product.url).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("CREATED");
              }
            }
            expect(data.syncToken).to.be.a('string');
            expect(data.syncToken).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
