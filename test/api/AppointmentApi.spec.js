/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InfusionsoftRestApi);
  }
}(this, function(expect, InfusionsoftRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InfusionsoftRestApi.AppointmentApi();
  });

  describe('(package)', function() {
    describe('AppointmentApi', function() {
      describe('appointmentsUsingGET', function() {
        it('should call appointmentsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for appointmentsUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.since = "since_example";
          opts.until = "until_example";
          opts.limit = 56;
          opts.offset = 56;

          instance.appointmentsUsingGET(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.AppointmentList);
            {
              let dataCtr = data.appointments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Appointment);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.endDate).to.be.a(Date);
                expect(data.endDate).to.be(new Date());
                expect(data.location).to.be.a('string');
                expect(data.location).to.be("");
                expect(data.remindTime).to.be.a('number');
                expect(data.remindTime).to.be(0);
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(new Date());
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
              }
            }
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.syncToken).to.be.a('string');
            expect(data.syncToken).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createAppointmentUsingPOST', function() {
        it('should call createAppointmentUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for createAppointmentUsingPOST call and complete the assertions
          /*
          var appointment = new InfusionsoftRestApi.Appointment();
          appointment.description = "";
          appointment.endDate = new Date();
          appointment.location = "";
          appointment.remindTime = 0;
          appointment.startDate = new Date();
          appointment.title = "";

          instance.createAppointmentUsingPOST(appointment, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.Appointment);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.endDate).to.be.a(Date);
            expect(data.endDate).to.be(new Date());
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("");
            expect(data.remindTime).to.be.a('number');
            expect(data.remindTime).to.be(0);
            expect(data.startDate).to.be.a(Date);
            expect(data.startDate).to.be(new Date());
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loadAppointmentUsingGET', function() {
        it('should call loadAppointmentUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for loadAppointmentUsingGET call and complete the assertions
          /*
          var appointmentId = "appointmentId_example";

          instance.loadAppointmentUsingGET(appointmentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.Appointment);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.endDate).to.be.a(Date);
            expect(data.endDate).to.be(new Date());
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("");
            expect(data.remindTime).to.be.a('number');
            expect(data.remindTime).to.be(0);
            expect(data.startDate).to.be.a(Date);
            expect(data.startDate).to.be(new Date());
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeAppointmentUsingDELETE', function() {
        it('should call removeAppointmentUsingDELETE successfully', function(done) {
          // TODO: uncomment, update parameter values for removeAppointmentUsingDELETE call
          /*
          var appointmentId = "appointmentId_example";

          instance.removeAppointmentUsingDELETE(appointmentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('replaceAppointmentUsingPUT', function() {
        it('should call replaceAppointmentUsingPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for replaceAppointmentUsingPUT call and complete the assertions
          /*
          var appointmentId = "appointmentId_example";
          var appointment = new InfusionsoftRestApi.Appointment();
          appointment.description = "";
          appointment.endDate = new Date();
          appointment.location = "";
          appointment.remindTime = 0;
          appointment.startDate = new Date();
          appointment.title = "";

          instance.replaceAppointmentUsingPUT(appointmentId, appointment, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.Appointment);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.endDate).to.be.a(Date);
            expect(data.endDate).to.be(new Date());
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("");
            expect(data.remindTime).to.be.a('number');
            expect(data.remindTime).to.be(0);
            expect(data.startDate).to.be.a(Date);
            expect(data.startDate).to.be(new Date());
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchUsingGET', function() {
        it('should call searchUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for searchUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.since = "since_example";
          opts.until = "until_example";
          opts.limit = 56;
          opts.offset = 56;

          instance.searchUsingGET(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.AppointmentList);
            {
              let dataCtr = data.appointments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Appointment);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.endDate).to.be.a(Date);
                expect(data.endDate).to.be(new Date());
                expect(data.location).to.be.a('string');
                expect(data.location).to.be("");
                expect(data.remindTime).to.be.a('number');
                expect(data.remindTime).to.be(0);
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(new Date());
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
              }
            }
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.syncToken).to.be.a('string');
            expect(data.syncToken).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('syncUsingGET', function() {
        it('should call syncUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for syncUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.syncToken = "syncToken_example";
          opts.limit = 56;
          opts.offset = 56;

          instance.syncUsingGET(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.AppointmentStatusList);
            {
              let dataCtr = data.appointmentStatuses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.AppointmentStatus);
                expect(data.appointment).to.be.a(InfusionsoftRestApi.Appointment);
                      expect(data.appointment.description).to.be.a('string');
                  expect(data.appointment.description).to.be("");
                  expect(data.appointment.endDate).to.be.a(Date);
                  expect(data.appointment.endDate).to.be(new Date());
                  expect(data.appointment.location).to.be.a('string');
                  expect(data.appointment.location).to.be("");
                  expect(data.appointment.remindTime).to.be.a('number');
                  expect(data.appointment.remindTime).to.be(0);
                  expect(data.appointment.startDate).to.be.a(Date);
                  expect(data.appointment.startDate).to.be(new Date());
                  expect(data.appointment.title).to.be.a('string');
                  expect(data.appointment.title).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("CREATED");
              }
            }
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.syncToken).to.be.a('string');
            expect(data.syncToken).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateAppointmentUsingPATCH', function() {
        it('should call updateAppointmentUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for updateAppointmentUsingPATCH call and complete the assertions
          /*
          var appointmentId = "appointmentId_example";
          var appointment = new InfusionsoftRestApi.Appointment();
          appointment.description = "";
          appointment.endDate = new Date();
          appointment.location = "";
          appointment.remindTime = 0;
          appointment.startDate = new Date();
          appointment.title = "";

          instance.updateAppointmentUsingPATCH(appointmentId, appointment, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.Appointment);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.endDate).to.be.a(Date);
            expect(data.endDate).to.be(new Date());
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("");
            expect(data.remindTime).to.be.a('number');
            expect(data.remindTime).to.be(0);
            expect(data.startDate).to.be.a(Date);
            expect(data.startDate).to.be(new Date());
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
