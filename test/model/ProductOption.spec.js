/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InfusionsoftRestApi);
  }
}(this, function(expect, InfusionsoftRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ProductOption', function() {
      beforeEach(function() {
        instance = new InfusionsoftRestApi.ProductOption();
      });

      it('should create an instance of ProductOption', function() {
        // TODO: update the code to test ProductOption
        expect(instance).to.be.a(InfusionsoftRestApi.ProductOption);
      });

      it('should have the property allowSpaces (base name: "allow_spaces")', function() {
        // TODO: update the code to test the property allowSpaces
        expect(instance).to.have.property('allowSpaces');
        // expect(instance.allowSpaces).to.be(expectedValueLiteral);
      });

      it('should have the property canContainCharacter (base name: "can_contain_character")', function() {
        // TODO: update the code to test the property canContainCharacter
        expect(instance).to.have.property('canContainCharacter');
        // expect(instance.canContainCharacter).to.be(expectedValueLiteral);
      });

      it('should have the property canContainNumber (base name: "can_contain_number")', function() {
        // TODO: update the code to test the property canContainNumber
        expect(instance).to.have.property('canContainNumber');
        // expect(instance.canContainNumber).to.be(expectedValueLiteral);
      });

      it('should have the property canEndWithCharacter (base name: "can_end_with_character")', function() {
        // TODO: update the code to test the property canEndWithCharacter
        expect(instance).to.have.property('canEndWithCharacter');
        // expect(instance.canEndWithCharacter).to.be(expectedValueLiteral);
      });

      it('should have the property canEndWithNumber (base name: "can_end_with_number")', function() {
        // TODO: update the code to test the property canEndWithNumber
        expect(instance).to.have.property('canEndWithNumber');
        // expect(instance.canEndWithNumber).to.be(expectedValueLiteral);
      });

      it('should have the property canStartWithCharacter (base name: "can_start_with_character")', function() {
        // TODO: update the code to test the property canStartWithCharacter
        expect(instance).to.have.property('canStartWithCharacter');
        // expect(instance.canStartWithCharacter).to.be(expectedValueLiteral);
      });

      it('should have the property canStartWithNumber (base name: "can_start_with_number")', function() {
        // TODO: update the code to test the property canStartWithNumber
        expect(instance).to.have.property('canStartWithNumber');
        // expect(instance.canStartWithNumber).to.be(expectedValueLiteral);
      });

      it('should have the property displayIndex (base name: "display_index")', function() {
        // TODO: update the code to test the property displayIndex
        expect(instance).to.have.property('displayIndex');
        // expect(instance.displayIndex).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property label (base name: "label")', function() {
        // TODO: update the code to test the property label
        expect(instance).to.have.property('label');
        // expect(instance.label).to.be(expectedValueLiteral);
      });

      it('should have the property maxChars (base name: "max_chars")', function() {
        // TODO: update the code to test the property maxChars
        expect(instance).to.have.property('maxChars');
        // expect(instance.maxChars).to.be(expectedValueLiteral);
      });

      it('should have the property minChars (base name: "min_chars")', function() {
        // TODO: update the code to test the property minChars
        expect(instance).to.have.property('minChars');
        // expect(instance.minChars).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property required (base name: "required")', function() {
        // TODO: update the code to test the property required
        expect(instance).to.have.property('required');
        // expect(instance.required).to.be(expectedValueLiteral);
      });

      it('should have the property textMessage (base name: "text_message")', function() {
        // TODO: update the code to test the property textMessage
        expect(instance).to.have.property('textMessage');
        // expect(instance.textMessage).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property values (base name: "values")', function() {
        // TODO: update the code to test the property values
        expect(instance).to.have.property('values');
        // expect(instance.values).to.be(expectedValueLiteral);
      });

    });
  });

}));
