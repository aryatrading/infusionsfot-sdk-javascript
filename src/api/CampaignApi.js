/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Campaign', 'model/CampaignList', 'model/SetOfIds'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Campaign'), require('../model/CampaignList'), require('../model/SetOfIds'));
  } else {
    // Browser globals (root is window)
    if (!root.InfusionsoftRestApi) {
      root.InfusionsoftRestApi = {};
    }
    root.InfusionsoftRestApi.CampaignApi = factory(root.InfusionsoftRestApi.ApiClient, root.InfusionsoftRestApi.Campaign, root.InfusionsoftRestApi.CampaignList, root.InfusionsoftRestApi.SetOfIds);
  }
}(this, function(ApiClient, Campaign, CampaignList, SetOfIds) {
  'use strict';

  /**
   * Campaign service.
   * @module api/CampaignApi
   * @version V1.0
   */

  /**
   * Constructs a new CampaignApi. 
   * @alias module:api/CampaignApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addContactsToCampaignSequenceUsingPOST operation.
     * @callback module:api/CampaignApi~addContactsToCampaignSequenceUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add to Campaign Sequence
     * Adds a single contact to a campaign sequence
     * @param {Number} campaignId campaignId
     * @param {Number} sequenceId sequenceId
     * @param {Number} contactId contactId
     * @param {module:api/CampaignApi~addContactsToCampaignSequenceUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addContactsToCampaignSequenceUsingPOST = function(campaignId, sequenceId, contactId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling addContactsToCampaignSequenceUsingPOST");
      }

      // verify the required parameter 'sequenceId' is set
      if (sequenceId === undefined || sequenceId === null) {
        throw new Error("Missing the required parameter 'sequenceId' when calling addContactsToCampaignSequenceUsingPOST");
      }

      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling addContactsToCampaignSequenceUsingPOST");
      }


      var pathParams = {
        'campaignId': campaignId,
        'sequenceId': sequenceId,
        'contactId': contactId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/campaigns/{campaignId}/sequences/{sequenceId}/contacts/{contactId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addContactsToCampaignSequenceUsingPOST1 operation.
     * @callback module:api/CampaignApi~addContactsToCampaignSequenceUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Multiple to Campaign Sequence
     * Adds a list of contacts to a campaign sequence
     * @param {Number} campaignId campaignId
     * @param {Number} sequenceId sequenceId
     * @param {module:model/SetOfIds} ids ids
     * @param {module:api/CampaignApi~addContactsToCampaignSequenceUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addContactsToCampaignSequenceUsingPOST1 = function(campaignId, sequenceId, ids, callback) {
      var postBody = ids;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling addContactsToCampaignSequenceUsingPOST1");
      }

      // verify the required parameter 'sequenceId' is set
      if (sequenceId === undefined || sequenceId === null) {
        throw new Error("Missing the required parameter 'sequenceId' when calling addContactsToCampaignSequenceUsingPOST1");
      }

      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling addContactsToCampaignSequenceUsingPOST1");
      }


      var pathParams = {
        'campaignId': campaignId,
        'sequenceId': sequenceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/campaigns/{campaignId}/sequences/{sequenceId}/contacts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCampaignsUsingGET operation.
     * @callback module:api/CampaignApi~getAllCampaignsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Campaigns
     * Retrieves all campaigns for the authenticated user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Sets a total of items to return
     * @param {Number} opts.offset Sets a beginning range of items to return
     * @param {module:api/CampaignApi~getAllCampaignsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignList}
     */
    this.getAllCampaignsUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CampaignList;

      return this.apiClient.callApi(
        '/campaigns', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignUsingGET operation.
     * @callback module:api/CampaignApi~getCampaignUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Campaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Campaign
     * Retrieves a single campaign
     * @param {Number} campaignId campaignId
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optionalProperties Comma-delimited list of Campaign properties to include in the response. (The fields `goals` and `sequences` aren't included, by default.)
     * @param {module:api/CampaignApi~getCampaignUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Campaign}
     */
    this.getCampaignUsingGET = function(campaignId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCampaignUsingGET");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'optional_properties': {
          value: opts['optionalProperties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Campaign;

      return this.apiClient.callApi(
        '/campaigns/{campaignId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeContactsFromCampaignSequenceUsingDELETE operation.
     * @callback module:api/CampaignApi~removeContactsFromCampaignSequenceUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove from Campaign Sequence
     * Removes a single contact from a campaign sequence
     * @param {Number} campaignId campaignId
     * @param {Number} sequenceId sequenceId
     * @param {Number} contactId contactId
     * @param {module:api/CampaignApi~removeContactsFromCampaignSequenceUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeContactsFromCampaignSequenceUsingDELETE = function(campaignId, sequenceId, contactId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling removeContactsFromCampaignSequenceUsingDELETE");
      }

      // verify the required parameter 'sequenceId' is set
      if (sequenceId === undefined || sequenceId === null) {
        throw new Error("Missing the required parameter 'sequenceId' when calling removeContactsFromCampaignSequenceUsingDELETE");
      }

      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling removeContactsFromCampaignSequenceUsingDELETE");
      }


      var pathParams = {
        'campaignId': campaignId,
        'sequenceId': sequenceId,
        'contactId': contactId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/campaigns/{campaignId}/sequences/{sequenceId}/contacts/{contactId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeContactsFromCampaignSequenceUsingDELETE1 operation.
     * @callback module:api/CampaignApi~removeContactsFromCampaignSequenceUsingDELETE1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Multiple from Campaign Sequence
     * Removes a list of contacts from a campaign sequence
     * @param {Number} campaignId campaignId
     * @param {Number} sequenceId sequenceId
     * @param {module:model/SetOfIds} ids ids
     * @param {module:api/CampaignApi~removeContactsFromCampaignSequenceUsingDELETE1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeContactsFromCampaignSequenceUsingDELETE1 = function(campaignId, sequenceId, ids, callback) {
      var postBody = ids;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling removeContactsFromCampaignSequenceUsingDELETE1");
      }

      // verify the required parameter 'sequenceId' is set
      if (sequenceId === undefined || sequenceId === null) {
        throw new Error("Missing the required parameter 'sequenceId' when calling removeContactsFromCampaignSequenceUsingDELETE1");
      }

      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling removeContactsFromCampaignSequenceUsingDELETE1");
      }


      var pathParams = {
        'campaignId': campaignId,
        'sequenceId': sequenceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/campaigns/{campaignId}/sequences/{sequenceId}/contacts', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
