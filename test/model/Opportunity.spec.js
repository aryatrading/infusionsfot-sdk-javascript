/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InfusionsoftRestApi);
  }
}(this, function(expect, InfusionsoftRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Opportunity', function() {
      beforeEach(function() {
        instance = new InfusionsoftRestApi.Opportunity();
      });

      it('should create an instance of Opportunity', function() {
        // TODO: update the code to test Opportunity
        expect(instance).to.be.a(InfusionsoftRestApi.Opportunity);
      });

      it('should have the property contact (base name: "contact")', function() {
        // TODO: update the code to test the property contact
        expect(instance).to.have.property('contact');
        // expect(instance.contact).to.be(expectedValueLiteral);
      });

      it('should have the property dateCreated (base name: "date_created")', function() {
        // TODO: update the code to test the property dateCreated
        expect(instance).to.have.property('dateCreated');
        // expect(instance.dateCreated).to.be(expectedValueLiteral);
      });

      it('should have the property estimatedCloseDate (base name: "estimated_close_date")', function() {
        // TODO: update the code to test the property estimatedCloseDate
        expect(instance).to.have.property('estimatedCloseDate');
        // expect(instance.estimatedCloseDate).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property includeInForecast (base name: "include_in_forecast")', function() {
        // TODO: update the code to test the property includeInForecast
        expect(instance).to.have.property('includeInForecast');
        // expect(instance.includeInForecast).to.be(expectedValueLiteral);
      });

      it('should have the property lastUpdated (base name: "last_updated")', function() {
        // TODO: update the code to test the property lastUpdated
        expect(instance).to.have.property('lastUpdated');
        // expect(instance.lastUpdated).to.be(expectedValueLiteral);
      });

      it('should have the property nextActionDate (base name: "next_action_date")', function() {
        // TODO: update the code to test the property nextActionDate
        expect(instance).to.have.property('nextActionDate');
        // expect(instance.nextActionDate).to.be(expectedValueLiteral);
      });

      it('should have the property nextActionNotes (base name: "next_action_notes")', function() {
        // TODO: update the code to test the property nextActionNotes
        expect(instance).to.have.property('nextActionNotes');
        // expect(instance.nextActionNotes).to.be(expectedValueLiteral);
      });

      it('should have the property opportunityNotes (base name: "opportunity_notes")', function() {
        // TODO: update the code to test the property opportunityNotes
        expect(instance).to.have.property('opportunityNotes');
        // expect(instance.opportunityNotes).to.be(expectedValueLiteral);
      });

      it('should have the property opportunityTitle (base name: "opportunity_title")', function() {
        // TODO: update the code to test the property opportunityTitle
        expect(instance).to.have.property('opportunityTitle');
        // expect(instance.opportunityTitle).to.be(expectedValueLiteral);
      });

      it('should have the property projectedRevenueHigh (base name: "projected_revenue_high")', function() {
        // TODO: update the code to test the property projectedRevenueHigh
        expect(instance).to.have.property('projectedRevenueHigh');
        // expect(instance.projectedRevenueHigh).to.be(expectedValueLiteral);
      });

      it('should have the property projectedRevenueLow (base name: "projected_revenue_low")', function() {
        // TODO: update the code to test the property projectedRevenueLow
        expect(instance).to.have.property('projectedRevenueLow');
        // expect(instance.projectedRevenueLow).to.be(expectedValueLiteral);
      });

      it('should have the property stage (base name: "stage")', function() {
        // TODO: update the code to test the property stage
        expect(instance).to.have.property('stage');
        // expect(instance.stage).to.be(expectedValueLiteral);
      });

      it('should have the property user (base name: "user")', function() {
        // TODO: update the code to test the property user
        expect(instance).to.have.property('user');
        // expect(instance.user).to.be(expectedValueLiteral);
      });

    });
  });

}));
