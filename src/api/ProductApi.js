/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Product', 'model/ProductList', 'model/ProductStatusList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Product'), require('../model/ProductList'), require('../model/ProductStatusList'));
  } else {
    // Browser globals (root is window)
    if (!root.InfusionsoftRestApi) {
      root.InfusionsoftRestApi = {};
    }
    root.InfusionsoftRestApi.ProductApi = factory(root.InfusionsoftRestApi.ApiClient, root.InfusionsoftRestApi.Product, root.InfusionsoftRestApi.ProductList, root.InfusionsoftRestApi.ProductStatusList);
  }
}(this, function(ApiClient, Product, ProductList, ProductStatusList) {
  'use strict';

  /**
   * Product service.
   * @module api/ProductApi
   * @version V1.0
   */

  /**
   * Constructs a new ProductApi. 
   * @alias module:api/ProductApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the loadProductUsingGET operation.
     * @callback module:api/ProductApi~loadProductUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Product
     * Retrieves a single product from the authorized Infusionsoft account
     * @param {Number} productId productId
     * @param {module:api/ProductApi~loadProductUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    this.loadProductUsingGET = function(productId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling loadProductUsingGET");
      }


      var pathParams = {
        'productId': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Product;

      return this.apiClient.callApi(
        '/products/{productId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsingGET3 operation.
     * @callback module:api/ProductApi~searchUsingGET3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Products
     * Retrieves a list of all products
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Sets a total of items to return
     * @param {Number} opts.offset Sets a beginning range of items to return
     * @param {Boolean} opts.active Sets status of items to return
     * @param {module:api/ProductApi~searchUsingGET3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductList}
     */
    this.searchUsingGET3 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'active': opts['active'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductList;

      return this.apiClient.callApi(
        '/products/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the syncUsingGET1 operation.
     * @callback module:api/ProductApi~syncUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductStatusList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Synced Products
     * The Sync endpoint returns a set of products that have been updated or created since the last result set was retrieved, minus any products that have been deleted.
     * @param {Object} opts Optional parameters
     * @param {String} opts.syncToken sync_token
     * @param {Number} opts.limit Sets a total of items to return
     * @param {Number} opts.offset Sets a beginning range of items to return
     * @param {module:api/ProductApi~syncUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductStatusList}
     */
    this.syncUsingGET1 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'sync_token': opts['syncToken'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductStatusList;

      return this.apiClient.callApi(
        '/products/sync', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
