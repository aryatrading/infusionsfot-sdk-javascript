/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Opportunity', 'model/OpportunityList', 'model/SalesPipeline'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Opportunity'), require('../model/OpportunityList'), require('../model/SalesPipeline'));
  } else {
    // Browser globals (root is window)
    if (!root.InfusionsoftRestApi) {
      root.InfusionsoftRestApi = {};
    }
    root.InfusionsoftRestApi.OpportunityApi = factory(root.InfusionsoftRestApi.ApiClient, root.InfusionsoftRestApi.Opportunity, root.InfusionsoftRestApi.OpportunityList, root.InfusionsoftRestApi.SalesPipeline);
  }
}(this, function(ApiClient, Opportunity, OpportunityList, SalesPipeline) {
  'use strict';

  /**
   * Opportunity service.
   * @module api/OpportunityApi
   * @version V1.0
   */

  /**
   * Constructs a new OpportunityApi. 
   * @alias module:api/OpportunityApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createOpportunityUsingPOST operation.
     * @callback module:api/OpportunityApi~createOpportunityUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Opportunity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Opportunity
     * Creates a new opportunity as the authenticated user. NB: Opportunity must contain values for `opportunity_title`, `contact`, and `stage`.
     * @param {Object} opts Optional parameters
     * @param {module:model/Opportunity} opts.opportunity opportunity
     * @param {module:api/OpportunityApi~createOpportunityUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Opportunity}
     */
    this.createOpportunityUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['opportunity'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Opportunity;

      return this.apiClient.callApi(
        '/opportunities', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOpportunityUsingGET operation.
     * @callback module:api/OpportunityApi~getOpportunityUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Opportunity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Opportunity
     * Retrives a single opportunity
     * @param {Number} opportunityId opportunityId
     * @param {module:api/OpportunityApi~getOpportunityUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Opportunity}
     */
    this.getOpportunityUsingGET = function(opportunityId, callback) {
      var postBody = null;

      // verify the required parameter 'opportunityId' is set
      if (opportunityId === undefined || opportunityId === null) {
        throw new Error("Missing the required parameter 'opportunityId' when calling getOpportunityUsingGET");
      }


      var pathParams = {
        'opportunityId': opportunityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Opportunity;

      return this.apiClient.callApi(
        '/opportunities/{opportunityId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStagePipelineUsingGET operation.
     * @callback module:api/OpportunityApi~getStagePipelineUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SalesPipeline>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Opportunity Stage Pipeline
     * Retrieves a list of all opportunity stages with pipeline details
     * @param {module:api/OpportunityApi~getStagePipelineUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SalesPipeline>}
     */
    this.getStagePipelineUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SalesPipeline];

      return this.apiClient.callApi(
        '/opportunity/stage_pipeline', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listOpportunitiesUsingGET operation.
     * @callback module:api/OpportunityApi~listOpportunitiesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpportunityList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Opportunities
     * Retrieves a list of all opportunities
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Sets a total of items to return
     * @param {Number} opts.offset Sets a beginning range of items to return
     * @param {Number} opts.userId Returns opportunities for the provided user id
     * @param {Number} opts.stageId Returns opportunities for the provided stage id
     * @param {String} opts.searchTerm Returns opportunities that match any of the contact's `given_name`, `family_name`, `company_name`, and `email_addresses` (searches `EMAIL1` only) fields as well as `opportunity_title`
     * @param {module:model/String} opts.order Attribute to order items by
     * @param {module:api/OpportunityApi~listOpportunitiesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpportunityList}
     */
    this.listOpportunitiesUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'user_id': opts['userId'],
        'stage_id': opts['stageId'],
        'search_term': opts['searchTerm'],
        'order': opts['order'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OpportunityList;

      return this.apiClient.callApi(
        '/opportunities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceOpportunityUsingPUT operation.
     * @callback module:api/OpportunityApi~replaceOpportunityUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Opportunity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an Opportunity
     * Replaces all values of a given opportunity
     * @param {Object} opts Optional parameters
     * @param {module:model/Opportunity} opts.opportunity opportunity
     * @param {module:api/OpportunityApi~replaceOpportunityUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Opportunity}
     */
    this.replaceOpportunityUsingPUT = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['opportunity'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Opportunity;

      return this.apiClient.callApi(
        '/opportunities', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOpportunityUsingPATCH operation.
     * @callback module:api/OpportunityApi~updateOpportunityUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Opportunity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Opportunity
     * Updates an opportunity with only the values provided in the request.
     * @param {Number} opportunityId opportunityId
     * @param {Object} opts Optional parameters
     * @param {module:model/Opportunity} opts.opportunity opportunity
     * @param {module:api/OpportunityApi~updateOpportunityUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Opportunity}
     */
    this.updateOpportunityUsingPATCH = function(opportunityId, opts, callback) {
      opts = opts || {};
      var postBody = opts['opportunity'];

      // verify the required parameter 'opportunityId' is set
      if (opportunityId === undefined || opportunityId === null) {
        throw new Error("Missing the required parameter 'opportunityId' when calling updateOpportunityUsingPATCH");
      }


      var pathParams = {
        'opportunityId': opportunityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Opportunity;

      return this.apiClient.callApi(
        '/opportunities/{opportunityId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
