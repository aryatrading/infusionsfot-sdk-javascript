/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InfusionsoftRestApi);
  }
}(this, function(expect, InfusionsoftRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InfusionsoftRestApi.ECommerceApi();
  });

  describe('(package)', function() {
    describe('ECommerceApi', function() {
      describe('loadOrderUsingGET', function() {
        it('should call loadOrderUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for loadOrderUsingGET call and complete the assertions
          /*
          var orderId = 789;

          instance.loadOrderUsingGET(orderId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.Order);
            expect(data.contact).to.be.a(InfusionsoftRestApi.OrderContactDetails);
                  expect(data.contact.companyName).to.be.a('string');
              expect(data.contact.companyName).to.be("");
              expect(data.contact.email).to.be.a('string');
              expect(data.contact.email).to.be("");
              expect(data.contact.firstName).to.be.a('string');
              expect(data.contact.firstName).to.be("");
              expect(data.contact.id).to.be.a('number');
              expect(data.contact.id).to.be("0");
              expect(data.contact.jobTitle).to.be.a('string');
              expect(data.contact.jobTitle).to.be("");
              expect(data.contact.lastName).to.be.a('string');
              expect(data.contact.lastName).to.be("");
            expect(data.creationDate).to.be.a('string');
            expect(data.creationDate).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.leadAffiliateId).to.be.a('number');
            expect(data.leadAffiliateId).to.be("0");
            expect(data.modificationDate).to.be.a('string');
            expect(data.modificationDate).to.be("");
            expect(data.orderDate).to.be.a('string');
            expect(data.orderDate).to.be("");
            {
              let dataCtr = data.orderItems;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.OrderItem);
                expect(data.cost).to.be.a('number');
                expect(data.cost).to.be(0.0);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.discount).to.be.a('number');
                expect(data.discount).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.notes).to.be.a('string');
                expect(data.notes).to.be("");
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.0);
                expect(data.product).to.be.a(InfusionsoftRestApi.SimpleProduct);
                      expect(data.product.description).to.be.a('string');
                  expect(data.product.description).to.be("");
                  expect(data.product.id).to.be.a('number');
                  expect(data.product.id).to.be("0");
                  expect(data.product.name).to.be.a('string');
                  expect(data.product.name).to.be("");
                  expect(data.product.shippable).to.be.a('boolean');
                  expect(data.product.shippable).to.be(false);
                  expect(data.product.sku).to.be.a('string');
                  expect(data.product.sku).to.be("");
                  expect(data.product.taxable).to.be.a('boolean');
                  expect(data.product.taxable).to.be(false);
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
              }
            }
            expect(data.recurring).to.be.a('boolean');
            expect(data.recurring).to.be(false);
            expect(data.refundTotal).to.be.a('number');
            expect(data.refundTotal).to.be(0.0);
            expect(data.salesAffiliateId).to.be.a('number');
            expect(data.salesAffiliateId).to.be("0");
            expect(data.shippingInformation).to.be.a(InfusionsoftRestApi.ShippingInformation);
                  expect(data.shippingInformation.city).to.be.a('string');
              expect(data.shippingInformation.city).to.be("");
              expect(data.shippingInformation.company).to.be.a('string');
              expect(data.shippingInformation.company).to.be("");
              expect(data.shippingInformation.country).to.be.a('string');
              expect(data.shippingInformation.country).to.be("");
              expect(data.shippingInformation.firstName).to.be.a('string');
              expect(data.shippingInformation.firstName).to.be("");
              expect(data.shippingInformation.id).to.be.a('number');
              expect(data.shippingInformation.id).to.be("0");
              expect(data.shippingInformation.lastName).to.be.a('string');
              expect(data.shippingInformation.lastName).to.be("");
              expect(data.shippingInformation.middleName).to.be.a('string');
              expect(data.shippingInformation.middleName).to.be("");
              expect(data.shippingInformation.phone).to.be.a('string');
              expect(data.shippingInformation.phone).to.be("");
              expect(data.shippingInformation.state).to.be.a('string');
              expect(data.shippingInformation.state).to.be("");
              expect(data.shippingInformation.street1).to.be.a('string');
              expect(data.shippingInformation.street1).to.be("");
              expect(data.shippingInformation.street2).to.be.a('string');
              expect(data.shippingInformation.street2).to.be("");
              expect(data.shippingInformation.zip).to.be.a('string');
              expect(data.shippingInformation.zip).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(0.0);
            expect(data.totalDue).to.be.a('number');
            expect(data.totalDue).to.be(0.0);
            expect(data.totalPaid).to.be.a('number');
            expect(data.totalPaid).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchUsingGET1', function() {
        it('should call searchUsingGET1 successfully', function(done) {
          // TODO: uncomment, update parameter values for searchUsingGET1 call and complete the assertions
          /*
          var opts = {};
          opts.since = "since_example";
          opts.until = "until_example";
          opts.limit = 56;
          opts.offset = 56;
          opts.paid = true;
          opts.order = "order_example";
          opts.contactId = 789;
          opts.productId = 789;

          instance.searchUsingGET1(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.OrderList);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            {
              let dataCtr = data.orders;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Order);
                expect(data.contact).to.be.a(InfusionsoftRestApi.OrderContactDetails);
                      expect(data.contact.companyName).to.be.a('string');
                  expect(data.contact.companyName).to.be("");
                  expect(data.contact.email).to.be.a('string');
                  expect(data.contact.email).to.be("");
                  expect(data.contact.firstName).to.be.a('string');
                  expect(data.contact.firstName).to.be("");
                  expect(data.contact.id).to.be.a('number');
                  expect(data.contact.id).to.be("0");
                  expect(data.contact.jobTitle).to.be.a('string');
                  expect(data.contact.jobTitle).to.be("");
                  expect(data.contact.lastName).to.be.a('string');
                  expect(data.contact.lastName).to.be("");
                expect(data.creationDate).to.be.a('string');
                expect(data.creationDate).to.be("");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.leadAffiliateId).to.be.a('number');
                expect(data.leadAffiliateId).to.be("0");
                expect(data.modificationDate).to.be.a('string');
                expect(data.modificationDate).to.be("");
                expect(data.orderDate).to.be.a('string');
                expect(data.orderDate).to.be("");
                {
                  let dataCtr = data.orderItems;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.OrderItem);
                    expect(data.cost).to.be.a('number');
                    expect(data.cost).to.be(0.0);
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.discount).to.be.a('number');
                    expect(data.discount).to.be(0.0);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.notes).to.be.a('string');
                    expect(data.notes).to.be("");
                    expect(data.price).to.be.a('number');
                    expect(data.price).to.be(0.0);
                    expect(data.product).to.be.a(InfusionsoftRestApi.SimpleProduct);
                          expect(data.product.description).to.be.a('string');
                      expect(data.product.description).to.be("");
                      expect(data.product.id).to.be.a('number');
                      expect(data.product.id).to.be("0");
                      expect(data.product.name).to.be.a('string');
                      expect(data.product.name).to.be("");
                      expect(data.product.shippable).to.be.a('boolean');
                      expect(data.product.shippable).to.be(false);
                      expect(data.product.sku).to.be.a('string');
                      expect(data.product.sku).to.be("");
                      expect(data.product.taxable).to.be.a('boolean');
                      expect(data.product.taxable).to.be(false);
                    expect(data.quantity).to.be.a('number');
                    expect(data.quantity).to.be(0);
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                  }
                }
                expect(data.recurring).to.be.a('boolean');
                expect(data.recurring).to.be(false);
                expect(data.refundTotal).to.be.a('number');
                expect(data.refundTotal).to.be(0.0);
                expect(data.salesAffiliateId).to.be.a('number');
                expect(data.salesAffiliateId).to.be("0");
                expect(data.shippingInformation).to.be.a(InfusionsoftRestApi.ShippingInformation);
                      expect(data.shippingInformation.city).to.be.a('string');
                  expect(data.shippingInformation.city).to.be("");
                  expect(data.shippingInformation.company).to.be.a('string');
                  expect(data.shippingInformation.company).to.be("");
                  expect(data.shippingInformation.country).to.be.a('string');
                  expect(data.shippingInformation.country).to.be("");
                  expect(data.shippingInformation.firstName).to.be.a('string');
                  expect(data.shippingInformation.firstName).to.be("");
                  expect(data.shippingInformation.id).to.be.a('number');
                  expect(data.shippingInformation.id).to.be("0");
                  expect(data.shippingInformation.lastName).to.be.a('string');
                  expect(data.shippingInformation.lastName).to.be("");
                  expect(data.shippingInformation.middleName).to.be.a('string');
                  expect(data.shippingInformation.middleName).to.be("");
                  expect(data.shippingInformation.phone).to.be.a('string');
                  expect(data.shippingInformation.phone).to.be("");
                  expect(data.shippingInformation.state).to.be.a('string');
                  expect(data.shippingInformation.state).to.be("");
                  expect(data.shippingInformation.street1).to.be.a('string');
                  expect(data.shippingInformation.street1).to.be("");
                  expect(data.shippingInformation.street2).to.be.a('string');
                  expect(data.shippingInformation.street2).to.be("");
                  expect(data.shippingInformation.zip).to.be.a('string');
                  expect(data.shippingInformation.zip).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.total).to.be.a('number');
                expect(data.total).to.be(0.0);
                expect(data.totalDue).to.be.a('number');
                expect(data.totalDue).to.be(0.0);
                expect(data.totalPaid).to.be.a('number');
                expect(data.totalPaid).to.be(0.0);
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchUsingGET2', function() {
        it('should call searchUsingGET2 successfully', function(done) {
          // TODO: uncomment, update parameter values for searchUsingGET2 call and complete the assertions
          /*
          var opts = {};
          opts.since = "since_example";
          opts.until = "until_example";
          opts.limit = 56;
          opts.offset = 56;
          opts.contactId = 789;

          instance.searchUsingGET2(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.TransactionList);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.transactions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Transaction);
                expect(data.amount).to.be.a('number');
                expect(data.amount).to.be(0.0);
                expect(data.collectionMethod).to.be.a('string');
                expect(data.collectionMethod).to.be("");
                expect(data.contactId).to.be.a('number');
                expect(data.contactId).to.be("0");
                expect(data.currency).to.be.a('string');
                expect(data.currency).to.be("");
                expect(data.errors).to.be.a('string');
                expect(data.errors).to.be("");
                expect(data.gateway).to.be.a('string');
                expect(data.gateway).to.be("");
                expect(data.gatewayAccountName).to.be.a('string');
                expect(data.gatewayAccountName).to.be("");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.orderIds).to.be.a('string');
                expect(data.orderIds).to.be("");
                {
                  let dataCtr = data.orders;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.Order);
                    expect(data.contact).to.be.a(InfusionsoftRestApi.OrderContactDetails);
                          expect(data.contact.companyName).to.be.a('string');
                      expect(data.contact.companyName).to.be("");
                      expect(data.contact.email).to.be.a('string');
                      expect(data.contact.email).to.be("");
                      expect(data.contact.firstName).to.be.a('string');
                      expect(data.contact.firstName).to.be("");
                      expect(data.contact.id).to.be.a('number');
                      expect(data.contact.id).to.be("0");
                      expect(data.contact.jobTitle).to.be.a('string');
                      expect(data.contact.jobTitle).to.be("");
                      expect(data.contact.lastName).to.be.a('string');
                      expect(data.contact.lastName).to.be("");
                    expect(data.creationDate).to.be.a('string');
                    expect(data.creationDate).to.be("");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.leadAffiliateId).to.be.a('number');
                    expect(data.leadAffiliateId).to.be("0");
                    expect(data.modificationDate).to.be.a('string');
                    expect(data.modificationDate).to.be("");
                    expect(data.orderDate).to.be.a('string');
                    expect(data.orderDate).to.be("");
                    {
                      let dataCtr = data.orderItems;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(InfusionsoftRestApi.OrderItem);
                        expect(data.cost).to.be.a('number');
                        expect(data.cost).to.be(0.0);
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
                        expect(data.discount).to.be.a('number');
                        expect(data.discount).to.be(0.0);
                        expect(data.id).to.be.a('number');
                        expect(data.id).to.be("0");
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.notes).to.be.a('string');
                        expect(data.notes).to.be("");
                        expect(data.price).to.be.a('number');
                        expect(data.price).to.be(0.0);
                        expect(data.product).to.be.a(InfusionsoftRestApi.SimpleProduct);
                              expect(data.product.description).to.be.a('string');
                          expect(data.product.description).to.be("");
                          expect(data.product.id).to.be.a('number');
                          expect(data.product.id).to.be("0");
                          expect(data.product.name).to.be.a('string');
                          expect(data.product.name).to.be("");
                          expect(data.product.shippable).to.be.a('boolean');
                          expect(data.product.shippable).to.be(false);
                          expect(data.product.sku).to.be.a('string');
                          expect(data.product.sku).to.be("");
                          expect(data.product.taxable).to.be.a('boolean');
                          expect(data.product.taxable).to.be(false);
                        expect(data.quantity).to.be.a('number');
                        expect(data.quantity).to.be(0);
                        expect(data.type).to.be.a('string');
                        expect(data.type).to.be("");
                      }
                    }
                    expect(data.recurring).to.be.a('boolean');
                    expect(data.recurring).to.be(false);
                    expect(data.refundTotal).to.be.a('number');
                    expect(data.refundTotal).to.be(0.0);
                    expect(data.salesAffiliateId).to.be.a('number');
                    expect(data.salesAffiliateId).to.be("0");
                    expect(data.shippingInformation).to.be.a(InfusionsoftRestApi.ShippingInformation);
                          expect(data.shippingInformation.city).to.be.a('string');
                      expect(data.shippingInformation.city).to.be("");
                      expect(data.shippingInformation.company).to.be.a('string');
                      expect(data.shippingInformation.company).to.be("");
                      expect(data.shippingInformation.country).to.be.a('string');
                      expect(data.shippingInformation.country).to.be("");
                      expect(data.shippingInformation.firstName).to.be.a('string');
                      expect(data.shippingInformation.firstName).to.be("");
                      expect(data.shippingInformation.id).to.be.a('number');
                      expect(data.shippingInformation.id).to.be("0");
                      expect(data.shippingInformation.lastName).to.be.a('string');
                      expect(data.shippingInformation.lastName).to.be("");
                      expect(data.shippingInformation.middleName).to.be.a('string');
                      expect(data.shippingInformation.middleName).to.be("");
                      expect(data.shippingInformation.phone).to.be.a('string');
                      expect(data.shippingInformation.phone).to.be("");
                      expect(data.shippingInformation.state).to.be.a('string');
                      expect(data.shippingInformation.state).to.be("");
                      expect(data.shippingInformation.street1).to.be.a('string');
                      expect(data.shippingInformation.street1).to.be("");
                      expect(data.shippingInformation.street2).to.be.a('string');
                      expect(data.shippingInformation.street2).to.be("");
                      expect(data.shippingInformation.zip).to.be.a('string');
                      expect(data.shippingInformation.zip).to.be("");
                    expect(data.status).to.be.a('string');
                    expect(data.status).to.be("");
                    expect(data.title).to.be.a('string');
                    expect(data.title).to.be("");
                    expect(data.total).to.be.a('number');
                    expect(data.total).to.be(0.0);
                    expect(data.totalDue).to.be.a('number');
                    expect(data.totalDue).to.be(0.0);
                    expect(data.totalPaid).to.be.a('number');
                    expect(data.totalPaid).to.be(0.0);
                  }
                }
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.test).to.be.a('boolean');
                expect(data.test).to.be(false);
                expect(data.transactionDate).to.be.a('string');
                expect(data.transactionDate).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('transactionByIdUsingGET', function() {
        it('should call transactionByIdUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for transactionByIdUsingGET call and complete the assertions
          /*
          var transactionId = 789;

          instance.transactionByIdUsingGET(transactionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.Transaction);
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be(0.0);
            expect(data.collectionMethod).to.be.a('string');
            expect(data.collectionMethod).to.be("");
            expect(data.contactId).to.be.a('number');
            expect(data.contactId).to.be("0");
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.errors).to.be.a('string');
            expect(data.errors).to.be("");
            expect(data.gateway).to.be.a('string');
            expect(data.gateway).to.be("");
            expect(data.gatewayAccountName).to.be.a('string');
            expect(data.gatewayAccountName).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.orderIds).to.be.a('string');
            expect(data.orderIds).to.be("");
            {
              let dataCtr = data.orders;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Order);
                expect(data.contact).to.be.a(InfusionsoftRestApi.OrderContactDetails);
                      expect(data.contact.companyName).to.be.a('string');
                  expect(data.contact.companyName).to.be("");
                  expect(data.contact.email).to.be.a('string');
                  expect(data.contact.email).to.be("");
                  expect(data.contact.firstName).to.be.a('string');
                  expect(data.contact.firstName).to.be("");
                  expect(data.contact.id).to.be.a('number');
                  expect(data.contact.id).to.be("0");
                  expect(data.contact.jobTitle).to.be.a('string');
                  expect(data.contact.jobTitle).to.be("");
                  expect(data.contact.lastName).to.be.a('string');
                  expect(data.contact.lastName).to.be("");
                expect(data.creationDate).to.be.a('string');
                expect(data.creationDate).to.be("");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.leadAffiliateId).to.be.a('number');
                expect(data.leadAffiliateId).to.be("0");
                expect(data.modificationDate).to.be.a('string');
                expect(data.modificationDate).to.be("");
                expect(data.orderDate).to.be.a('string');
                expect(data.orderDate).to.be("");
                {
                  let dataCtr = data.orderItems;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.OrderItem);
                    expect(data.cost).to.be.a('number');
                    expect(data.cost).to.be(0.0);
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.discount).to.be.a('number');
                    expect(data.discount).to.be(0.0);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.notes).to.be.a('string');
                    expect(data.notes).to.be("");
                    expect(data.price).to.be.a('number');
                    expect(data.price).to.be(0.0);
                    expect(data.product).to.be.a(InfusionsoftRestApi.SimpleProduct);
                          expect(data.product.description).to.be.a('string');
                      expect(data.product.description).to.be("");
                      expect(data.product.id).to.be.a('number');
                      expect(data.product.id).to.be("0");
                      expect(data.product.name).to.be.a('string');
                      expect(data.product.name).to.be("");
                      expect(data.product.shippable).to.be.a('boolean');
                      expect(data.product.shippable).to.be(false);
                      expect(data.product.sku).to.be.a('string');
                      expect(data.product.sku).to.be("");
                      expect(data.product.taxable).to.be.a('boolean');
                      expect(data.product.taxable).to.be(false);
                    expect(data.quantity).to.be.a('number');
                    expect(data.quantity).to.be(0);
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                  }
                }
                expect(data.recurring).to.be.a('boolean');
                expect(data.recurring).to.be(false);
                expect(data.refundTotal).to.be.a('number');
                expect(data.refundTotal).to.be(0.0);
                expect(data.salesAffiliateId).to.be.a('number');
                expect(data.salesAffiliateId).to.be("0");
                expect(data.shippingInformation).to.be.a(InfusionsoftRestApi.ShippingInformation);
                      expect(data.shippingInformation.city).to.be.a('string');
                  expect(data.shippingInformation.city).to.be("");
                  expect(data.shippingInformation.company).to.be.a('string');
                  expect(data.shippingInformation.company).to.be("");
                  expect(data.shippingInformation.country).to.be.a('string');
                  expect(data.shippingInformation.country).to.be("");
                  expect(data.shippingInformation.firstName).to.be.a('string');
                  expect(data.shippingInformation.firstName).to.be("");
                  expect(data.shippingInformation.id).to.be.a('number');
                  expect(data.shippingInformation.id).to.be("0");
                  expect(data.shippingInformation.lastName).to.be.a('string');
                  expect(data.shippingInformation.lastName).to.be("");
                  expect(data.shippingInformation.middleName).to.be.a('string');
                  expect(data.shippingInformation.middleName).to.be("");
                  expect(data.shippingInformation.phone).to.be.a('string');
                  expect(data.shippingInformation.phone).to.be("");
                  expect(data.shippingInformation.state).to.be.a('string');
                  expect(data.shippingInformation.state).to.be("");
                  expect(data.shippingInformation.street1).to.be.a('string');
                  expect(data.shippingInformation.street1).to.be("");
                  expect(data.shippingInformation.street2).to.be.a('string');
                  expect(data.shippingInformation.street2).to.be("");
                  expect(data.shippingInformation.zip).to.be.a('string');
                  expect(data.shippingInformation.zip).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.total).to.be.a('number');
                expect(data.total).to.be(0.0);
                expect(data.totalDue).to.be.a('number');
                expect(data.totalDue).to.be(0.0);
                expect(data.totalPaid).to.be.a('number');
                expect(data.totalPaid).to.be(0.0);
              }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.test).to.be.a('boolean');
            expect(data.test).to.be(false);
            expect(data.transactionDate).to.be.a('string');
            expect(data.transactionDate).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('transactionsForOrderUsingGET', function() {
        it('should call transactionsForOrderUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for transactionsForOrderUsingGET call and complete the assertions
          /*
          var orderId = "orderId_example";
          var opts = {};
          opts.since = "since_example";
          opts.until = "until_example";
          opts.limit = 56;
          opts.offset = 56;
          opts.contactId = 789;

          instance.transactionsForOrderUsingGET(orderId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.TransactionList);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.transactions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Transaction);
                expect(data.amount).to.be.a('number');
                expect(data.amount).to.be(0.0);
                expect(data.collectionMethod).to.be.a('string');
                expect(data.collectionMethod).to.be("");
                expect(data.contactId).to.be.a('number');
                expect(data.contactId).to.be("0");
                expect(data.currency).to.be.a('string');
                expect(data.currency).to.be("");
                expect(data.errors).to.be.a('string');
                expect(data.errors).to.be("");
                expect(data.gateway).to.be.a('string');
                expect(data.gateway).to.be("");
                expect(data.gatewayAccountName).to.be.a('string');
                expect(data.gatewayAccountName).to.be("");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.orderIds).to.be.a('string');
                expect(data.orderIds).to.be("");
                {
                  let dataCtr = data.orders;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.Order);
                    expect(data.contact).to.be.a(InfusionsoftRestApi.OrderContactDetails);
                          expect(data.contact.companyName).to.be.a('string');
                      expect(data.contact.companyName).to.be("");
                      expect(data.contact.email).to.be.a('string');
                      expect(data.contact.email).to.be("");
                      expect(data.contact.firstName).to.be.a('string');
                      expect(data.contact.firstName).to.be("");
                      expect(data.contact.id).to.be.a('number');
                      expect(data.contact.id).to.be("0");
                      expect(data.contact.jobTitle).to.be.a('string');
                      expect(data.contact.jobTitle).to.be("");
                      expect(data.contact.lastName).to.be.a('string');
                      expect(data.contact.lastName).to.be("");
                    expect(data.creationDate).to.be.a('string');
                    expect(data.creationDate).to.be("");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.leadAffiliateId).to.be.a('number');
                    expect(data.leadAffiliateId).to.be("0");
                    expect(data.modificationDate).to.be.a('string');
                    expect(data.modificationDate).to.be("");
                    expect(data.orderDate).to.be.a('string');
                    expect(data.orderDate).to.be("");
                    {
                      let dataCtr = data.orderItems;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(InfusionsoftRestApi.OrderItem);
                        expect(data.cost).to.be.a('number');
                        expect(data.cost).to.be(0.0);
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
                        expect(data.discount).to.be.a('number');
                        expect(data.discount).to.be(0.0);
                        expect(data.id).to.be.a('number');
                        expect(data.id).to.be("0");
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.notes).to.be.a('string');
                        expect(data.notes).to.be("");
                        expect(data.price).to.be.a('number');
                        expect(data.price).to.be(0.0);
                        expect(data.product).to.be.a(InfusionsoftRestApi.SimpleProduct);
                              expect(data.product.description).to.be.a('string');
                          expect(data.product.description).to.be("");
                          expect(data.product.id).to.be.a('number');
                          expect(data.product.id).to.be("0");
                          expect(data.product.name).to.be.a('string');
                          expect(data.product.name).to.be("");
                          expect(data.product.shippable).to.be.a('boolean');
                          expect(data.product.shippable).to.be(false);
                          expect(data.product.sku).to.be.a('string');
                          expect(data.product.sku).to.be("");
                          expect(data.product.taxable).to.be.a('boolean');
                          expect(data.product.taxable).to.be(false);
                        expect(data.quantity).to.be.a('number');
                        expect(data.quantity).to.be(0);
                        expect(data.type).to.be.a('string');
                        expect(data.type).to.be("");
                      }
                    }
                    expect(data.recurring).to.be.a('boolean');
                    expect(data.recurring).to.be(false);
                    expect(data.refundTotal).to.be.a('number');
                    expect(data.refundTotal).to.be(0.0);
                    expect(data.salesAffiliateId).to.be.a('number');
                    expect(data.salesAffiliateId).to.be("0");
                    expect(data.shippingInformation).to.be.a(InfusionsoftRestApi.ShippingInformation);
                          expect(data.shippingInformation.city).to.be.a('string');
                      expect(data.shippingInformation.city).to.be("");
                      expect(data.shippingInformation.company).to.be.a('string');
                      expect(data.shippingInformation.company).to.be("");
                      expect(data.shippingInformation.country).to.be.a('string');
                      expect(data.shippingInformation.country).to.be("");
                      expect(data.shippingInformation.firstName).to.be.a('string');
                      expect(data.shippingInformation.firstName).to.be("");
                      expect(data.shippingInformation.id).to.be.a('number');
                      expect(data.shippingInformation.id).to.be("0");
                      expect(data.shippingInformation.lastName).to.be.a('string');
                      expect(data.shippingInformation.lastName).to.be("");
                      expect(data.shippingInformation.middleName).to.be.a('string');
                      expect(data.shippingInformation.middleName).to.be("");
                      expect(data.shippingInformation.phone).to.be.a('string');
                      expect(data.shippingInformation.phone).to.be("");
                      expect(data.shippingInformation.state).to.be.a('string');
                      expect(data.shippingInformation.state).to.be("");
                      expect(data.shippingInformation.street1).to.be.a('string');
                      expect(data.shippingInformation.street1).to.be("");
                      expect(data.shippingInformation.street2).to.be.a('string');
                      expect(data.shippingInformation.street2).to.be("");
                      expect(data.shippingInformation.zip).to.be.a('string');
                      expect(data.shippingInformation.zip).to.be("");
                    expect(data.status).to.be.a('string');
                    expect(data.status).to.be("");
                    expect(data.title).to.be.a('string');
                    expect(data.title).to.be("");
                    expect(data.total).to.be.a('number');
                    expect(data.total).to.be(0.0);
                    expect(data.totalDue).to.be.a('number');
                    expect(data.totalDue).to.be(0.0);
                    expect(data.totalPaid).to.be.a('number');
                    expect(data.totalPaid).to.be(0.0);
                  }
                }
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.test).to.be.a('boolean');
                expect(data.test).to.be(false);
                expect(data.transactionDate).to.be.a('string');
                expect(data.transactionDate).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
