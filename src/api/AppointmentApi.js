/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Appointment', 'model/AppointmentList', 'model/AppointmentStatusList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Appointment'), require('../model/AppointmentList'), require('../model/AppointmentStatusList'));
  } else {
    // Browser globals (root is window)
    if (!root.InfusionsoftRestApi) {
      root.InfusionsoftRestApi = {};
    }
    root.InfusionsoftRestApi.AppointmentApi = factory(root.InfusionsoftRestApi.ApiClient, root.InfusionsoftRestApi.Appointment, root.InfusionsoftRestApi.AppointmentList, root.InfusionsoftRestApi.AppointmentStatusList);
  }
}(this, function(ApiClient, Appointment, AppointmentList, AppointmentStatusList) {
  'use strict';

  /**
   * Appointment service.
   * @module api/AppointmentApi
   * @version V1.0
   */

  /**
   * Constructs a new AppointmentApi. 
   * @alias module:api/AppointmentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the appointmentsUsingGET operation.
     * @callback module:api/AppointmentApi~appointmentsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppointmentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Appointments
     * Retrieves all appointments for the authenticated user
     * @param {Object} opts Optional parameters
     * @param {String} opts.since Date to start searching from ex. `2017-01-01T22:17:59.039Z`
     * @param {String} opts.until Date to search to ex. `2017-01-01T22:17:59.039Z`
     * @param {Number} opts.limit Sets a total of items to return
     * @param {Number} opts.offset Sets a beginning range of items to return
     * @param {module:api/AppointmentApi~appointmentsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppointmentList}
     */
    this.appointmentsUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AppointmentList;

      return this.apiClient.callApi(
        '/appointments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAppointmentUsingPOST operation.
     * @callback module:api/AppointmentApi~createAppointmentUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Appointment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Appointment
     * Creates a new appointment as the authenticated user
     * @param {module:model/Appointment} appointment appointment
     * @param {module:api/AppointmentApi~createAppointmentUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Appointment}
     */
    this.createAppointmentUsingPOST = function(appointment, callback) {
      var postBody = appointment;

      // verify the required parameter 'appointment' is set
      if (appointment === undefined || appointment === null) {
        throw new Error("Missing the required parameter 'appointment' when calling createAppointmentUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Appointment;

      return this.apiClient.callApi(
        '/appointments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loadAppointmentUsingGET operation.
     * @callback module:api/AppointmentApi~loadAppointmentUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Appointment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Appointment
     * Retrieves a specific appointment belonging to the authenticated user
     * @param {String} appointmentId appointmentId
     * @param {module:api/AppointmentApi~loadAppointmentUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Appointment}
     */
    this.loadAppointmentUsingGET = function(appointmentId, callback) {
      var postBody = null;

      // verify the required parameter 'appointmentId' is set
      if (appointmentId === undefined || appointmentId === null) {
        throw new Error("Missing the required parameter 'appointmentId' when calling loadAppointmentUsingGET");
      }


      var pathParams = {
        'appointmentId': appointmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Appointment;

      return this.apiClient.callApi(
        '/appointments/{appointmentId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAppointmentUsingDELETE operation.
     * @callback module:api/AppointmentApi~removeAppointmentUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Appointment
     * Deletes the specified appointment
     * @param {String} appointmentId appointmentId
     * @param {module:api/AppointmentApi~removeAppointmentUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeAppointmentUsingDELETE = function(appointmentId, callback) {
      var postBody = null;

      // verify the required parameter 'appointmentId' is set
      if (appointmentId === undefined || appointmentId === null) {
        throw new Error("Missing the required parameter 'appointmentId' when calling removeAppointmentUsingDELETE");
      }


      var pathParams = {
        'appointmentId': appointmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/appointments/{appointmentId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceAppointmentUsingPUT operation.
     * @callback module:api/AppointmentApi~replaceAppointmentUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Appointment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an Appointment
     * Replaces all values of a given appointment
     * @param {String} appointmentId appointmentId
     * @param {module:model/Appointment} appointment appointment
     * @param {module:api/AppointmentApi~replaceAppointmentUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Appointment}
     */
    this.replaceAppointmentUsingPUT = function(appointmentId, appointment, callback) {
      var postBody = appointment;

      // verify the required parameter 'appointmentId' is set
      if (appointmentId === undefined || appointmentId === null) {
        throw new Error("Missing the required parameter 'appointmentId' when calling replaceAppointmentUsingPUT");
      }

      // verify the required parameter 'appointment' is set
      if (appointment === undefined || appointment === null) {
        throw new Error("Missing the required parameter 'appointment' when calling replaceAppointmentUsingPUT");
      }


      var pathParams = {
        'appointmentId': appointmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Appointment;

      return this.apiClient.callApi(
        '/appointments/{appointmentId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsingGET operation.
     * @callback module:api/AppointmentApi~searchUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppointmentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Appointments
     * Retrieves all appointments belonging to the authenticated user for the specified date range
     * @param {Object} opts Optional parameters
     * @param {String} opts.since Date to start searching from ex. `2017-01-01T22:17:59.039Z`
     * @param {String} opts.until Date to search to ex. `2017-01-01T22:17:59.039Z`
     * @param {Number} opts.limit Sets a total of items to return
     * @param {Number} opts.offset Sets a beginning range of items to return
     * @param {module:api/AppointmentApi~searchUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppointmentList}
     */
    this.searchUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AppointmentList;

      return this.apiClient.callApi(
        '/appointments/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the syncUsingGET operation.
     * @callback module:api/AppointmentApi~syncUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppointmentStatusList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Synced Appointments
     * The Sync endpoint returns a set of appointments that have been updated or created since the last result set was retrieved, minus any appointments that have been deleted
     * @param {Object} opts Optional parameters
     * @param {String} opts.syncToken sync_token
     * @param {Number} opts.limit Sets a total of items to return
     * @param {Number} opts.offset Sets a beginning range of items to return
     * @param {module:api/AppointmentApi~syncUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppointmentStatusList}
     */
    this.syncUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'sync_token': opts['syncToken'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AppointmentStatusList;

      return this.apiClient.callApi(
        '/appointments/sync', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppointmentUsingPATCH operation.
     * @callback module:api/AppointmentApi~updateAppointmentUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Appointment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Appointment
     * Updates the provided values of a given appointment
     * @param {String} appointmentId appointmentId
     * @param {module:model/Appointment} appointment appointment
     * @param {module:api/AppointmentApi~updateAppointmentUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Appointment}
     */
    this.updateAppointmentUsingPATCH = function(appointmentId, appointment, callback) {
      var postBody = appointment;

      // verify the required parameter 'appointmentId' is set
      if (appointmentId === undefined || appointmentId === null) {
        throw new Error("Missing the required parameter 'appointmentId' when calling updateAppointmentUsingPATCH");
      }

      // verify the required parameter 'appointment' is set
      if (appointment === undefined || appointment === null) {
        throw new Error("Missing the required parameter 'appointment' when calling updateAppointmentUsingPATCH");
      }


      var pathParams = {
        'appointmentId': appointmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Appointment;

      return this.apiClient.callApi(
        '/appointments/{appointmentId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
