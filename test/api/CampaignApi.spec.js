/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InfusionsoftRestApi);
  }
}(this, function(expect, InfusionsoftRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InfusionsoftRestApi.CampaignApi();
  });

  describe('(package)', function() {
    describe('CampaignApi', function() {
      describe('addContactsToCampaignSequenceUsingPOST', function() {
        it('should call addContactsToCampaignSequenceUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for addContactsToCampaignSequenceUsingPOST call
          /*
          var campaignId = 789;
          var sequenceId = 789;
          var contactId = 789;

          instance.addContactsToCampaignSequenceUsingPOST(campaignId, sequenceId, contactId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addContactsToCampaignSequenceUsingPOST1', function() {
        it('should call addContactsToCampaignSequenceUsingPOST1 successfully', function(done) {
          // TODO: uncomment, update parameter values for addContactsToCampaignSequenceUsingPOST1 call
          /*
          var campaignId = 789;
          var sequenceId = 789;
          var ids = new InfusionsoftRestApi.SetOfIds();
          ids.ids = ["0"];

          instance.addContactsToCampaignSequenceUsingPOST1(campaignId, sequenceId, ids, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllCampaignsUsingGET', function() {
        it('should call getAllCampaignsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllCampaignsUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.limit = 56;
          opts.offset = 56;

          instance.getAllCampaignsUsingGET(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.CampaignList);
            {
              let dataCtr = data.campaigns;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Campaign);
                expect(data.activeContactCount).to.be.a('number');
                expect(data.activeContactCount).to.be(0);
                expect(data.completedContactCount).to.be.a('number');
                expect(data.completedContactCount).to.be(0);
                expect(data.dateCreated).to.be.a(Date);
                expect(data.dateCreated).to.be(new Date());
                expect(data.errorMessage).to.be.a('string');
                expect(data.errorMessage).to.be("");
                {
                  let dataCtr = data.goals;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.Goal);
                    expect(data.historicalContactCounts).to.be.a(InfusionsoftRestApi.HistoricalCounts);
                          expect(data.historicalContactCounts._24Hours).to.be.a('number');
                      expect(data.historicalContactCounts._24Hours).to.be(0);
                      expect(data.historicalContactCounts._30Days).to.be.a('number');
                      expect(data.historicalContactCounts._30Days).to.be(0);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data.nextSequenceIds;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be("0");
                      }
                    }
                    {
                      let dataCtr = data.previousSequenceIds;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be("0");
                      }
                    }
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("WebForm");
                  }
                }
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.publishedDate).to.be.a(Date);
                expect(data.publishedDate).to.be(new Date());
                expect(data.publishedStatus).to.be.a('boolean');
                expect(data.publishedStatus).to.be(false);
                expect(data.publishedTimeZone).to.be.a('string');
                expect(data.publishedTimeZone).to.be("");
                {
                  let dataCtr = data.sequences;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.Sequence);
                    expect(data.activeContactCount).to.be.a('number');
                    expect(data.activeContactCount).to.be(0);
                    expect(data.activeContactCountCompleted).to.be.a('number');
                    expect(data.activeContactCountCompleted).to.be(0);
                    expect(data.historicalContactCount).to.be.a(InfusionsoftRestApi.HistoricalCounts);
                          expect(data.historicalContactCount._24Hours).to.be.a('number');
                      expect(data.historicalContactCount._24Hours).to.be(0);
                      expect(data.historicalContactCount._30Days).to.be.a('number');
                      expect(data.historicalContactCount._30Days).to.be(0);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data.paths;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(InfusionsoftRestApi.SequencePath);
                        expect(data.id).to.be.a('number');
                        expect(data.id).to.be("0");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(InfusionsoftRestApi.Item);
                            expect(data.id).to.be.a('number');
                            expect(data.id).to.be("0");
                            expect(data.name).to.be.a('string');
                            expect(data.name).to.be("");
                            expect(data.nextItemId).to.be.a('number');
                            expect(data.nextItemId).to.be("0");
                            expect(data.previousItemId).to.be.a('number');
                            expect(data.previousItemId).to.be("0");
                            expect(data.type).to.be.a('string');
                            expect(data.type).to.be("NULL");
                          }
                        }
                      }
                    }
                  }
                }
                expect(data.timeZone).to.be.a('string');
                expect(data.timeZone).to.be("");
              }
            }
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCampaignUsingGET', function() {
        it('should call getCampaignUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getCampaignUsingGET call and complete the assertions
          /*
          var campaignId = 789;
          var opts = {};
          opts.optionalProperties = ["optionalProperties_example"];

          instance.getCampaignUsingGET(campaignId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(InfusionsoftRestApi.Campaign);
            expect(data.activeContactCount).to.be.a('number');
            expect(data.activeContactCount).to.be(0);
            expect(data.completedContactCount).to.be.a('number');
            expect(data.completedContactCount).to.be(0);
            expect(data.dateCreated).to.be.a(Date);
            expect(data.dateCreated).to.be(new Date());
            expect(data.errorMessage).to.be.a('string');
            expect(data.errorMessage).to.be("");
            {
              let dataCtr = data.goals;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Goal);
                expect(data.historicalContactCounts).to.be.a(InfusionsoftRestApi.HistoricalCounts);
                      expect(data.historicalContactCounts._24Hours).to.be.a('number');
                  expect(data.historicalContactCounts._24Hours).to.be(0);
                  expect(data.historicalContactCounts._30Days).to.be.a('number');
                  expect(data.historicalContactCounts._30Days).to.be(0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                {
                  let dataCtr = data.nextSequenceIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be("0");
                  }
                }
                {
                  let dataCtr = data.previousSequenceIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be("0");
                  }
                }
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("WebForm");
              }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.publishedDate).to.be.a(Date);
            expect(data.publishedDate).to.be(new Date());
            expect(data.publishedStatus).to.be.a('boolean');
            expect(data.publishedStatus).to.be(false);
            expect(data.publishedTimeZone).to.be.a('string');
            expect(data.publishedTimeZone).to.be("");
            {
              let dataCtr = data.sequences;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(InfusionsoftRestApi.Sequence);
                expect(data.activeContactCount).to.be.a('number');
                expect(data.activeContactCount).to.be(0);
                expect(data.activeContactCountCompleted).to.be.a('number');
                expect(data.activeContactCountCompleted).to.be(0);
                expect(data.historicalContactCount).to.be.a(InfusionsoftRestApi.HistoricalCounts);
                      expect(data.historicalContactCount._24Hours).to.be.a('number');
                  expect(data.historicalContactCount._24Hours).to.be(0);
                  expect(data.historicalContactCount._30Days).to.be.a('number');
                  expect(data.historicalContactCount._30Days).to.be(0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                {
                  let dataCtr = data.paths;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(InfusionsoftRestApi.SequencePath);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    {
                      let dataCtr = data.items;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(InfusionsoftRestApi.Item);
                        expect(data.id).to.be.a('number');
                        expect(data.id).to.be("0");
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.nextItemId).to.be.a('number');
                        expect(data.nextItemId).to.be("0");
                        expect(data.previousItemId).to.be.a('number');
                        expect(data.previousItemId).to.be("0");
                        expect(data.type).to.be.a('string');
                        expect(data.type).to.be("NULL");
                      }
                    }
                  }
                }
              }
            }
            expect(data.timeZone).to.be.a('string');
            expect(data.timeZone).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeContactsFromCampaignSequenceUsingDELETE', function() {
        it('should call removeContactsFromCampaignSequenceUsingDELETE successfully', function(done) {
          // TODO: uncomment, update parameter values for removeContactsFromCampaignSequenceUsingDELETE call
          /*
          var campaignId = 789;
          var sequenceId = 789;
          var contactId = 789;

          instance.removeContactsFromCampaignSequenceUsingDELETE(campaignId, sequenceId, contactId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeContactsFromCampaignSequenceUsingDELETE1', function() {
        it('should call removeContactsFromCampaignSequenceUsingDELETE1 successfully', function(done) {
          // TODO: uncomment, update parameter values for removeContactsFromCampaignSequenceUsingDELETE1 call
          /*
          var campaignId = 789;
          var sequenceId = 789;
          var ids = new InfusionsoftRestApi.SetOfIds();
          ids.ids = ["0"];

          instance.removeContactsFromCampaignSequenceUsingDELETE1(campaignId, sequenceId, ids, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
